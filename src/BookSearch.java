
import java.awt.Window;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E-Therng
 */
public class BookSearch extends javax.swing.JFrame {

    
    int user = 0;
    
    
    DefaultTableModel model;
    /**
     * Creates new form BookSearch
     */
    public BookSearch() {
        initComponents();
        jPanel2.setVisible(false);
        SerialCombo.setEnabled(false);
        SerialCombo.setVisible(false);
        boolean x = true;
        try {
            FileReader fr = new FileReader("CurrentUser.txt");
            BufferedReader br = new BufferedReader(fr);
            String r = "";
            while ((r = br.readLine()) != null) {
                StringTokenizer tk = new StringTokenizer(r, ",");
                String pat = tk.nextToken();
                user = Integer.parseInt(pat);
                }
        } catch (Exception e) {
            x=false;
        }
        
        if(x==true)
        {
            try {
            FileReader fr = new FileReader("Patron.txt");
            BufferedReader br = new BufferedReader(fr);
            String r = "";
            while ((r = br.readLine()) != null) {
                StringTokenizer tk = new StringTokenizer(r, ",");
                String block = tk.nextToken();
                String floor = tk.nextToken();
                String n = tk.nextToken();
                String hpn = tk.nextToken();
                String email = tk.nextToken();
                String mem = tk.nextToken();
                String del = tk.nextToken();
                int ser = Integer.parseInt(tk.nextToken());
                if (user==ser) {
                    PatronCombo.removeAllItems();
                    PatronCombo.addItem(n);
                }
            }
            br.close();
        } catch (Exception e) {

        }
        }
        
        model = (DefaultTableModel) SearchTable.getModel();
        SearchTable.setRowSelectionAllowed(true);
        
        SelectBook.setEnabled(false);
        TitleLabel.setVisible(false);
        TitleSearch.setVisible(false);
        jPanel4.setVisible(false);
        TitleSearch.setEnabled(false);
        Gen.setVisible(false);
        GenreCombo.setVisible(false);
        AuthorSearch.setVisible(false);
        AvailableLabel.setVisible(false);
        Available.setVisible(false);
        NotAvailable.setVisible(false);
        All.setVisible(false);
        Auth.setVisible(false);
        
        GenreCombo.setEnabled(false);
        Auth.setEnabled(false);
        AuthorSearch.setEnabled(false);
        Available.setEnabled(false);
        NotAvailable.setEnabled(false);
        All.setEnabled(false);
        
        Author.setVisible(false);
        AuthorLabel.setVisible(false);
        BookName.setVisible(false);
        Borrow.setVisible(false);
        jPanel2.setVisible(false);
        EstimateLabel.setVisible(false);
        CopLeft.setVisible(false);
        Genre.setVisible(false);
        GenreLabel.setVisible(false);
        Hold.setVisible(false);
        
        Author.setEditable(false);
        Borrow.setEnabled(false);
        CopLeft.setEditable(false);
        Genre.setEditable(false);
        Hold.setEnabled(false);
        Serial.setVisible(false);
    }

    private String getTodayDate()
    {
        
        //defines the format
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        
        //gets the system datee
        Date todayD = new Date();
        
        //formats today's date as per our format defined in the first line
        String m = df.format(todayD);
        
        return m;
        //will return string m which contains the data.
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Availability = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        SearchBook = new javax.swing.JButton();
        Simple = new javax.swing.JRadioButton();
        Advanced = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SearchTable = new javax.swing.JTable();
        BackToPatronHomePage = new javax.swing.JButton();
        SelectBook = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Borrow = new javax.swing.JButton();
        GenreLabel = new javax.swing.JLabel();
        EstimateLabel = new javax.swing.JLabel();
        Genre = new javax.swing.JTextField();
        BookName = new javax.swing.JLabel();
        Hold = new javax.swing.JButton();
        AuthorLabel = new javax.swing.JLabel();
        Author = new javax.swing.JTextField();
        CopLeft = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        PatronCombo = new javax.swing.JComboBox<>();
        Select = new javax.swing.JButton();
        Select1 = new javax.swing.JButton();
        PatSearch = new javax.swing.JLabel();
        SearchBar = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        SerialCombo = new javax.swing.JComboBox<>();
        Serial = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        TitleLabel = new javax.swing.JLabel();
        TitleSearch = new javax.swing.JTextField();
        Gen = new javax.swing.JLabel();
        GenreCombo = new javax.swing.JComboBox<>();
        AuthorSearch = new javax.swing.JTextField();
        Auth = new javax.swing.JLabel();
        AvailableLabel = new javax.swing.JLabel();
        Available = new javax.swing.JRadioButton();
        NotAvailable = new javax.swing.JRadioButton();
        All = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(202, 214, 226));
        jPanel1.setForeground(new java.awt.Color(119, 133, 149));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Book Search");

        SearchBook.setText("Search Book");
        SearchBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBookActionPerformed(evt);
            }
        });

        buttonGroup1.add(Simple);
        Simple.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Simple.setText("Simple Search");
        Simple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimpleActionPerformed(evt);
            }
        });

        buttonGroup1.add(Advanced);
        Advanced.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Advanced.setText("Advanced Search");
        Advanced.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdvancedActionPerformed(evt);
            }
        });

        SearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Author", "Genre", "Availability", "S"
            }
        ));
        jScrollPane1.setViewportView(SearchTable);
        if (SearchTable.getColumnModel().getColumnCount() > 0) {
            SearchTable.getColumnModel().getColumn(4).setMinWidth(0);
            SearchTable.getColumnModel().getColumn(4).setPreferredWidth(0);
            SearchTable.getColumnModel().getColumn(4).setMaxWidth(0);
        }

        BackToPatronHomePage.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        BackToPatronHomePage.setText("Back to Home Page");
        BackToPatronHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToPatronHomePageActionPerformed(evt);
            }
        });

        SelectBook.setText("Select Book");
        SelectBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectBookActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(243, 196, 192));

        Borrow.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Borrow.setText("Borrow Book");
        Borrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrowActionPerformed(evt);
            }
        });

        GenreLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        GenreLabel.setText("Genre:");

        EstimateLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        EstimateLabel.setText("Copies Left:");

        BookName.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        BookName.setText("Book Name");

        Hold.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Hold.setText("Hold Book");
        Hold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoldActionPerformed(evt);
            }
        });

        AuthorLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        AuthorLabel.setText("Author:");

        CopLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopLeftActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(36, 36, 36)
                            .addComponent(GenreLabel)
                            .addGap(5, 5, 5)
                            .addComponent(Genre, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(EstimateLabel)
                            .addGap(6, 6, 6)
                            .addComponent(CopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(AuthorLabel)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(50, 50, 50)
                            .addComponent(Author, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(BookName))
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Borrow, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Hold, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Hold, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(BookName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AuthorLabel)
                                    .addComponent(Author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(Borrow, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GenreLabel)
                            .addComponent(Genre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(EstimateLabel))
                            .addComponent(CopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 24, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(162, 249, 211));

        PatronCombo.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        PatronCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Patron Name" }));
        PatronCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatronComboActionPerformed(evt);
            }
        });

        Select.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Select.setText("Sign In");
        Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectActionPerformed(evt);
            }
        });

        Select1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Select1.setText("Sign Out");
        Select1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select1ActionPerformed(evt);
            }
        });

        PatSearch.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        PatSearch.setText("Patron Search");

        SearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarActionPerformed(evt);
            }
        });

        Search.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        SerialCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Serial" }));
        SerialCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SerialComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(Select, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87)
                                .addComponent(Select1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(Serial, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(PatronCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(SerialCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(PatSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchBar)
                        .addGap(18, 18, 18)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PatSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PatronCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SerialCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Serial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Select, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Select1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(242, 227, 213));

        TitleLabel.setText("Title Search");

        Gen.setText("Genre");

        GenreCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genre" }));

        Auth.setText("Author");

        AvailableLabel.setText("Availability");

        Availability.add(Available);
        Available.setText("Available");

        Availability.add(NotAvailable);
        NotAvailable.setText("Not Available");

        Availability.add(All);
        All.setText("All");
        All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                            .addComponent(AvailableLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Available)
                            .addGap(6, 6, 6)
                            .addComponent(NotAvailable)
                            .addGap(6, 6, 6)
                            .addComponent(All))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(27, 27, 27)
                            .addComponent(Auth)))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(Gen)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(GenreCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(TitleLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(TitleSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(AuthorSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(TitleLabel))
                    .addComponent(TitleSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Gen)
                    .addComponent(GenreCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AuthorSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Auth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Available)
                        .addComponent(AvailableLabel))
                    .addComponent(NotAvailable)
                    .addComponent(All))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(BackToPatronHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(222, 222, 222))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(SearchBook, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Simple)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Advanced))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(209, 209, 209)
                .addComponent(SelectBook, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(BackToPatronHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Simple)
                    .addComponent(Advanced))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SearchBook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SelectBook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchBarActionPerformed

    private void PatronComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatronComboActionPerformed
        if(PatronCombo.getSelectedIndex()>0)
        {
            SerialCombo.setSelectedIndex(PatronCombo.getSelectedIndex());
        }
    }//GEN-LAST:event_PatronComboActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        if(SearchBar.getText().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter Patron Name!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else{
            try{
                PatronCombo.removeAllItems();
                PatronCombo.addItem("Patron Name");
                SerialCombo.removeAllItems();
                SerialCombo.addItem("Serial");
                String na = SearchBar.getText();
                FileReader fr = new FileReader("Patron.txt");
                BufferedReader br = new BufferedReader(fr);
                String r ="";

                while((r=br.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(r,",");
                    String block = tk.nextToken();
                    String floor = tk.nextToken();
                    String n = tk.nextToken();
                    String hpn = tk.nextToken();
                    String email = tk.nextToken();
                    String mem = tk.nextToken();
                    String del = tk.nextToken();
                    String ser = tk.nextToken();
                    if(n.contains(na))
                    {
                        PatronCombo.addItem(n + ": " + block + "," + floor);
                        SerialCombo.addItem(ser);
                    }
                }
                br.close();
            }
            catch(Exception e)
            {
            }
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectActionPerformed
        if(SerialCombo.getSelectedIndex()==0)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Please Select Patron!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else
        {

            try{
                user = Integer.parseInt(SerialCombo.getSelectedItem().toString());
                FileWriter PatInfo = new FileWriter("CurrentUser.txt", false);
                PrintWriter PatWriter = new PrintWriter(PatInfo);
                String x = getTodayDate();
                PatWriter.println(SerialCombo.getSelectedItem().toString());
                PatWriter.close();
            }
            catch(Exception e)
            {

            }
        }
    }//GEN-LAST:event_SelectActionPerformed

    private void SerialComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SerialComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SerialComboActionPerformed

    private void AllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AllActionPerformed

    private void SearchBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBookActionPerformed

        if(Simple.isSelected())
        {
            if(TitleSearch.getText().equals(""))
            {
                javax.swing.JOptionPane.showMessageDialog(null, "Enter Title!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                model = (DefaultTableModel) SearchTable.getModel();
                model.setRowCount(0);

                try{
                    boolean err=true;
                    String na = TitleSearch.getText();
                    FileReader cr = new FileReader("MainBook.txt");
                    BufferedReader br = new BufferedReader(cr);
                    String r ="";
                    while((r=br.readLine())!=null)
                    {
                        StringTokenizer tk = new StringTokenizer(r,",");
                        String n = tk.nextToken();
                        String author = tk.nextToken();
                        String genre = tk.nextToken();
                        String price = tk.nextToken();
                        String copy = tk.nextToken();
                        String av = tk.nextToken();
                        String del = tk.nextToken();
                        String bookse = tk.nextToken();
                        if(del.equals("0"))
                        {

                        }
                        else
                        {
                            if(n.contains(na))
                            {
                                if(av.equals("Y"))
                                {
                                    model.insertRow(model.getRowCount(), new Object[]{n,author,genre,"Available",bookse});
                                }
                                if(av.equals("N"))
                                {
                                    model.insertRow(model.getRowCount(), new Object[]{n,author,genre,"Not Available",bookse});
                                }
                                err=false;
                                SelectBook.setEnabled(true);
                            }
                        }
                    }
                    br.close();
                    if(err==true)
                    {
                        javax.swing.JOptionPane.showMessageDialog(null, "No Books Found!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }
                catch(Exception e)
                {
                }

            }
        }

        if(Advanced.isSelected())
        {
            if(TitleSearch.getText().equals("") && GenreCombo.getSelectedIndex()==0 && AuthorSearch.getText().equals("") && Availability.getSelection()==null)
            {
                javax.swing.JOptionPane.showMessageDialog(null, "Enter Book Credentials!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                model = (DefaultTableModel) SearchTable.getModel();
                model.setRowCount(0);
                try{
                    boolean err = false;
                    String na = TitleSearch.getText();
                    String au = AuthorSearch.getText();
                    String gen = GenreCombo.getSelectedItem()+"";
                    FileReader fr = new FileReader("MainBook.txt");
                    BufferedReader br = new BufferedReader(fr);
                    String r ="";
                    while((r=br.readLine())!=null)
                    {
                        boolean yes = true;
                        StringTokenizer tk = new StringTokenizer(r,",");
                        String n = tk.nextToken();
                        String author = tk.nextToken();
                        String genre = tk.nextToken();
                        String price = tk.nextToken();
                        String copy = tk.nextToken();
                        String av = tk.nextToken();
                        String del = tk.nextToken();
                        String serial = tk.nextToken();
                        if(del.equals("0"))
                        {
                            yes=false;
                        }
                        if((TitleSearch.getText().equals("")==false) && (n.contains(na)==false))
                        {
                            yes=false;
                        }
                        if(GenreCombo.getSelectedIndex()!=0 && genre.equals(gen)==false && yes==true)
                        {
                            yes=false;
                        }
                        if((AuthorSearch.getText().equals("")==false && author.contains(au)==false) && yes==true)
                        {
                            yes=false;
                        }
                        if(Availability.getSelection()!=null && NotAvailable.isSelected()==true && av.equals("Y") && yes==true)
                        {
                            yes=false;
                        }
                        if(Availability.getSelection()!=null && Available.isSelected()==true && av.equals("N") && yes==true)
                        {
                            yes=false;
                        }
                        if(yes==true)
                        {
                            if(av.equals("Y"))
                            {
                                model.insertRow(model.getRowCount(), new Object[]{n,author,genre,"Available",serial});
                            }
                            if(av.equals("N"))
                            {
                                model.insertRow(model.getRowCount(), new Object[]{n,author,genre,"Not Available",serial});
                            }
                            SelectBook.setEnabled(true);
                            err=true;
                        }
                    }
                    if(err==false)
                    {
                        javax.swing.JOptionPane.showMessageDialog(null, "No Books Found!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    br.close();
                }
                catch(Exception e)
                {
                }
            }
        }
    }//GEN-LAST:event_SearchBookActionPerformed

    private void SimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimpleActionPerformed
        TitleLabel.setVisible(true);
        TitleSearch.setVisible(true);
        jPanel4.setVisible(true);
        TitleSearch.setEnabled(true);

        Gen.setVisible(false);
        GenreCombo.setVisible(false);
        AuthorSearch.setVisible(false);
        AvailableLabel.setVisible(false);
        Available.setVisible(false);
        NotAvailable.setVisible(false);
        All.setVisible(false);
        Auth.setVisible(false);

        GenreCombo.setEnabled(false);
        Auth.setEnabled(false);
        AuthorSearch.setEnabled(false);
        Available.setEnabled(false);
        NotAvailable.setEnabled(false);
        All.setEnabled(false);
    }//GEN-LAST:event_SimpleActionPerformed

    private void AdvancedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdvancedActionPerformed
        TitleLabel.setVisible(true);
        TitleSearch.setVisible(true);
        jPanel4.setVisible(true);
        TitleSearch.setEnabled(true);

        Gen.setVisible(true);
        GenreCombo.setVisible(true);
        AuthorSearch.setVisible(true);
        AvailableLabel.setVisible(true);
        Available.setVisible(true);
        NotAvailable.setVisible(true);
        All.setVisible(true);
        Auth.setVisible(true);

        GenreCombo.setEnabled(true);
        Auth.setEnabled(true);
        AuthorSearch.setEnabled(true);
        Available.setEnabled(true);
        NotAvailable.setEnabled(true);
        All.setEnabled(true);

        GenreCombo.addItem("Poetry");
        GenreCombo.addItem("Fiction");
        GenreCombo.addItem("Fantasy");
        GenreCombo.addItem("Science Fiction");
        GenreCombo.addItem("Mystery");
        GenreCombo.addItem("Biography");
        GenreCombo.addItem("Drama");
        GenreCombo.addItem("Nonfiction");
    }//GEN-LAST:event_AdvancedActionPerformed

    private void BackToPatronHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToPatronHomePageActionPerformed
        AdminHomePage f1 = new AdminHomePage();

        f1.show();

        ((Window)getRootPane().getParent()).dispose();
    }//GEN-LAST:event_BackToPatronHomePageActionPerformed

    private void SelectBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectBookActionPerformed
        if(SearchTable.getSelectionModel().isSelectionEmpty())
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Select Book!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else
        {

            Author.setVisible(true);
            AuthorLabel.setVisible(true);
            BookName.setVisible(true);
            Borrow.setVisible(true);
            jPanel2.setVisible(true);
            EstimateLabel.setVisible(true);
            CopLeft.setVisible(true);
            Genre.setVisible(true);
            GenreLabel.setVisible(true);
            Hold.setVisible(true);

            Borrow.setEnabled(true);
            Hold.setEnabled(true);

            row = SearchTable.getSelectedRow();

            ser = Integer.parseInt(SearchTable.getModel().getValueAt(row, 4)+"");
            String av = SearchTable.getModel().getValueAt(row, 3)+"";

            try{
                boolean hol = true;
                boolean bor = true;
                FileReader br = new FileReader("MainBook.txt");
                BufferedReader bur = new BufferedReader(br);
                String re ="";
                int am = 0;
                while((re=bur.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    String name = tk.nextToken();
                    String auth = tk.nextToken();
                    String gen = tk.nextToken();
                    String pr = tk.nextToken();
                    String cop = tk.nextToken();
                    String available = tk.nextToken();
                    String del = tk.nextToken();
                    int se = Integer.parseInt(tk.nextToken());
                    if(ser==se)
                    {
                        BookName.setText(name);
                        Author.setText(auth);
                        Genre.setText(gen);

                        if(available.equals("Y"))
                        {
                            hol = false;
                        }
                        if(available.equals("N"))
                        {
                            bor = false;
                        }
                    }
                }
                if(hol==false)
                {
                    Hold.setEnabled(false);
                }
                if(bor==false)
                {
                    Borrow.setEnabled(false);
                }
            }
            catch(Exception e)
            {
            }
            int ho = 0;
            boolean h = false;
            try{

                FileReader br = new FileReader("Hold.txt");
                BufferedReader bur = new BufferedReader(br);
                String re ="";

                while((re=bur.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    int patron = Integer.parseInt(tk.nextToken());
                    int bookse = Integer.parseInt(tk.nextToken());
                    if(ser==bookse)
                    {
                        ho = ho+1;
                        if(patron==user)
                        {
                            h = true;
                        }
                    }
                }
            }
            catch(Exception e)
            {
            }

            try{

                FileReader br = new FileReader("Book.txt");
                BufferedReader bur = new BufferedReader(br);
                String re ="";
                int x = 0;
                while((re=bur.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    String name = tk.nextToken();
                    String auth = tk.nextToken();
                    String gen = tk.nextToken();
                    String pr = tk.nextToken();
                    String avs = tk.nextToken();
                    String del = tk.nextToken();
                    int bookse = Integer.parseInt(tk.nextToken());
                    int se = Integer.parseInt(tk.nextToken());
                    if(ser==bookse && avs.equals("Y") && del.equals("1"))
                    {
                        x=x+1;
                    }
                }
                x = x - ho;
                if(x>0)
                {
                    CopLeft.setText(x+"");
                }
                else if(x<=0 && h==true)
                {
                    CopLeft.setText("1");
                }
                else if(x<=0 && h==false)
                {
                    CopLeft.setText("0");
                    Borrow.setEnabled(false);
                    Hold.setEnabled(true);
                }
            }
            catch(Exception e)
            {
            }
        }
    }//GEN-LAST:event_SelectBookActionPerformed

    private void BorrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrowActionPerformed
        boolean err= false;
        boolean dell = false;

        try{
            FileReader mer = new FileReader("Patron.txt");
            BufferedReader mem = new BufferedReader(mer);
            String res ="";
            while((res=mem.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(res,",");
                String block = tk.nextToken();
                String floor = tk.nextToken();
                String n = tk.nextToken();
                String hpn = tk.nextToken();
                String email = tk.nextToken();
                String memb = tk.nextToken();
                String del = tk.nextToken();
                int ser = Integer.parseInt(tk.nextToken());

                if(user==ser && del.equals("N"))
                {
                    dell=true;
                }
            }
        }
        catch(Exception e)
        {

        }
        if(dell==true && err==false)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Patron is Deleted and Cannot Borrow Book!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=true;
        }
        if(err==false)
        {

            boolean canbor = true;

            int duration = 0;
            String memb = "";
            int borr = 0;
            try
            {
                FileReader fr = new FileReader("Patron.txt");
                BufferedReader brr = new BufferedReader(fr);
                String r = "";

                while ((r = brr.readLine()) != null)
                {
                    StringTokenizer tk = new StringTokenizer(r, ",");
                    String block = tk.nextToken();
                    String floor = tk.nextToken();
                    String n = tk.nextToken();
                    int hpn = Integer.parseInt(tk.nextToken());
                    String email = tk.nextToken();
                    String mem = tk.nextToken();
                    String del = tk.nextToken();
                    int serial = Integer.parseInt(tk.nextToken());
                    if(user==serial)
                    {
                        memb=mem;
                    }
                }
                brr.close();
                FileReader frr = new FileReader("Membership.txt");
                BufferedReader brrr = new BufferedReader(frr);
                r = "";
                while ((r = brrr.readLine()) != null)
                {
                    StringTokenizer tk = new StringTokenizer(r, ",");
                    String title = tk.nextToken();
                    String price = tk.nextToken();
                    int borrowQ = Integer.parseInt(tk.nextToken());
                    String holdQ = tk.nextToken();
                    int duratio = Integer.parseInt(tk.nextToken());
                    String memberQ  = tk.nextToken();
                    String del = tk.nextToken();
                    String ser = tk.nextToken();
                    if(memb.equals(ser))
                    {
                        duration=duratio;
                        borr=borrowQ;
                    }
                }
                brr.close();
            }
            catch(Exception e)
            {

            }
            try{
                //if borrowing quota is full

                FileReader br = new FileReader("Borrow.txt");
                BufferedReader bur = new BufferedReader(br);
                String re ="";
                int am = 0;
                while((re=bur.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    int patron = Integer.parseInt(tk.nextToken());
                    if(user==patron)
                    {
                        am=am+1;
                    }
                }
                System.out.println(am);
                if(borr==am)
                {
                    canbor = false;
                    borr = borr - am;
                }
                borr = borr - am - 1;
            }
            catch(Exception e)
            {

            }
            if(canbor==false)
            {
                javax.swing.JOptionPane.showMessageDialog(null, "Borrowing Quota Full", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

            else
            {
                String bookchange = "";
                int bookborrow = 0;
                int stillav = 0;
                ArrayList<String>restoreList = new ArrayList<String>();
                try{

                    FileReader br = new FileReader("Book.txt");
                    BufferedReader bur = new BufferedReader(br);
                    String re ="";
                    int am = 0;
                    int x = 0;
                    while((re=bur.readLine())!=null)
                    {
                        StringTokenizer tk = new StringTokenizer(re,",");
                        String name = tk.nextToken();
                        String auth = tk.nextToken();
                        String gen = tk.nextToken();
                        String pr = tk.nextToken();
                        String av = tk.nextToken();
                        String del = tk.nextToken();
                        int bookse = Integer.parseInt(tk.nextToken());
                        int se = Integer.parseInt(tk.nextToken());

                        if(ser==bookse && av.equals("Y") && x==0 && del.equals("1"))
                        {
                            bookborrow = se;
                            restoreList.add(name + "," + auth + "," + gen + "," + pr+ ",N," + del + "," + bookse + "," +se);
                            x=x+1;
                        }
                        else
                        {
                            restoreList.add(re);
                        }
                        if(ser==bookse && av.equals("Y") && del.equals("1"))
                        {
                            stillav=stillav+1;
                        }
                    }
                }
                catch(Exception e)
                {
                }

                try{

                    ArrayList<String>restorelist = new ArrayList<String>();
                    FileReader br = new FileReader("Hold.txt");
                    BufferedReader bur = new BufferedReader(br);
                    String re ="";
                    while((re=bur.readLine())!=null)
                    {
                        StringTokenizer tk = new StringTokenizer(re,",");
                        int patron = Integer.parseInt(tk.nextToken());
                        int bookse = Integer.parseInt(tk.nextToken());

                        if(ser==bookse && user==patron)
                        {
                        }
                        else
                        {
                            restorelist.add(re);
                        }
                    }

                    FileWriter BookInfo = new FileWriter("Hold.txt", false);
                    PrintWriter BookWriter = new PrintWriter(BookInfo);
                    for(int i=0; i<restoreList.size(); i++)
                    {
                        String s = restorelist.get(i);
                        BookWriter.println(s);
                    }

                }
                catch(Exception e)
                {
                }
                try{

                    String x = getTodayDate(); //getting today's date
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy"); //format of the date

                    Calendar c = Calendar.getInstance(); // creating a calendar instance

                    c.add(Calendar.DATE, duration); //number of days to add
                    String dt = sdf.format(c.getTime()); //convert the calendar to dd/MM/yyyy format

                    FileWriter BorrowInfo = new FileWriter("Borrow.txt", true);
                    PrintWriter BorrowWriter = new PrintWriter(BorrowInfo);

                    BorrowWriter.println(user + "," + ser + "," + bookborrow + "," + "1" + "," + dt) ;
                    BorrowWriter.close();

                    FileWriter BookInfo = new FileWriter("Book.txt", false);
                    PrintWriter BookWriter = new PrintWriter(BookInfo);

                    for(int i=0; i<restoreList.size(); i++)
                    {
                        String s = restoreList.get(i);
                        BookWriter.println(s);
                    }
                    BookWriter.close();

                    FileWriter TransInfo = new FileWriter("Transactions.txt", true);
                    PrintWriter TransWriter = new PrintWriter(TransInfo);

                    TransWriter.println("Borrow" + "," + user + "," + ser + "," + dt) ;
                    TransWriter.close();

                    if(stillav==1)
                    {
                        ArrayList<String>restoreMainList = new ArrayList<String>();

                        FileReader fur = new FileReader("MainBook.txt");
                        BufferedReader buur = new BufferedReader(fur);
                        String r ="";

                        while((r=buur.readLine())!=null)
                        {
                            StringTokenizer tk = new StringTokenizer(r,",");
                            String name = tk.nextToken();
                            String auth = tk.nextToken();
                            String gen = tk.nextToken();
                            String pr = tk.nextToken();
                            int copies = Integer.parseInt(tk.nextToken());
                            String av = tk.nextToken();
                            String del = tk.nextToken();
                            int bookse = Integer.parseInt(tk.nextToken());
                            if(bookse==ser)
                            {
                                restoreMainList.add(name + "," + auth + "," + gen + "," + pr + "," + copies + "," + "N" + "," + del + "," + bookse);
                            }
                            else
                            {
                                restoreMainList.add(r);//added the record to the array list
                            }
                        }
                        fur.close();

                        FileWriter fw = new FileWriter("MainBook.txt",false);
                        PrintWriter pr = new PrintWriter(fw);

                        for(int i=0; i<restoreMainList.size(); i++)
                        {
                            String s = restoreMainList.get(i);
                            pr.println(s);
                        }
                        pr.close();
                    }
                    javax.swing.JOptionPane.showMessageDialog(null, "Book Borrowed Successfully!" + "\n" + "The Return Date is: " + dt + "\n" + "You Can Borrow: " + borr + " More Books!", "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    SelectBook.doClick();
                    SearchBook.doClick();
                }
                catch(Exception q)
                {

                }
            }

        }
    }//GEN-LAST:event_BorrowActionPerformed

    private void HoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoldActionPerformed
        boolean err = false;
        boolean dell = false;
        String memm = "";
        try{
            FileReader mer = new FileReader("Patron.txt");
            BufferedReader mem = new BufferedReader(mer);
            String res ="";
            while((res=mem.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(res,",");
                String block = tk.nextToken();
                String floor = tk.nextToken();
                String n = tk.nextToken();
                String hpn = tk.nextToken();
                String email = tk.nextToken();
                String memb = tk.nextToken();
                String del = tk.nextToken();
                int ser = Integer.parseInt(tk.nextToken());

                if(user==ser && del.equals("N"))
                {
                    dell=true;
                }
                if(user==ser)
                {
                    memm = memb;
                }
            }
        }
        catch(Exception e)
        {

        }
        if(dell==true && err==false)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Patron is Deleted and Cannot Hold Book!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=true;
        }
        if(err==false)
        {
            boolean canhol = true;
            int hol = 0;
            try {
                FileReader ResReader = new FileReader("Membership.txt");
                BufferedReader ResBuffer = new BufferedReader(ResReader);
                String oneSetData = "";
                while ((oneSetData = ResBuffer.readLine()) != null) {
                    StringTokenizer tk = new StringTokenizer(oneSetData, ",");
                    String title = tk.nextToken();
                    String price = tk.nextToken();
                    String borrowq = tk.nextToken();
                    int holdq = Integer.parseInt(tk.nextToken());
                    String duration = tk.nextToken();
                    String memberq = tk.nextToken();
                    String del = tk.nextToken();
                    String memser = tk.nextToken();
                    if(memm.equals(memser))
                    {
                        hol=holdq;
                        System.out.println(holdq+"");
                    }
                }
            } catch (Exception e) {
            }

            try{
                //if holding quota is full

                FileReader br = new FileReader("Hold.txt");
                BufferedReader bur = new BufferedReader(br);
                String re ="";
                int am = 0;
                while((re=bur.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    int patron = Integer.parseInt(tk.nextToken());
                    String book = tk.nextToken();
                    if(user==patron)
                    {
                        am=am+1;

                    }
                }
                if(hol==am)
                {
                    System.out.println("hi");
                    canhol=false;
                }
            }
            catch(Exception e)
            {
            }

            try{
                //if book is currently borrowed/has been returned for 2 weeks (Report)

                FileReader br = new FileReader("Borrow.txt");
                BufferedReader bur = new BufferedReader(br);
                String re = "";
                int am = 0;
                while((re=bur.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    int patron = Integer.parseInt(tk.nextToken());
                    int book = Integer.parseInt(tk.nextToken());
                    if(user==patron && ser==book)
                    {
                        System.out.println("hi");
                        canhol=false;
                    }
                }
            }
            catch(Exception e)
            {

            }
            if(canhol==false)
            {
                javax.swing.JOptionPane.showMessageDialog(null, "Cannot Hold Book", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            else
            {

                try{

                    FileWriter BookInfo = new FileWriter("Hold.txt");
                    PrintWriter BookWriter = new PrintWriter(BookInfo);

                    BookWriter.println(user + "," + ser) ;
                    BookWriter.close();

                    String x = getTodayDate();

                    FileWriter TransInfo = new FileWriter("Transactions.txt", true);
                    PrintWriter TransWriter = new PrintWriter(TransInfo);

                    TransWriter.println("Hold" + "," + user + "," + ser + "," + x) ;
                    TransWriter.close();
                    SelectBook.doClick();
                    javax.swing.JOptionPane.showMessageDialog(null, "Book Hold Successful!", "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
                catch(Exception e)
                {

                }
            }
        }
    }//GEN-LAST:event_HoldActionPerformed

    private void CopLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopLeftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CopLeftActionPerformed

    private void Select1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select1ActionPerformed
        try{

            FileWriter PatInfo = new FileWriter("CurrentUser.txt", false);
            PrintWriter PatWriter = new PrintWriter(PatInfo);
            String x = getTodayDate();
            PatWriter.println("");
            PatWriter.close();
            PatronCombo.removeAllItems();
            PatronCombo.addItem("Select Patron");
            SearchBar.setText("");
        }
        catch(Exception e)
        {

        }
    }//GEN-LAST:event_Select1ActionPerformed
int ser = 0;
int row = 0;
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookSearch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Advanced;
    private javax.swing.JRadioButton All;
    private javax.swing.JLabel Auth;
    private javax.swing.JTextField Author;
    private javax.swing.JLabel AuthorLabel;
    private javax.swing.JTextField AuthorSearch;
    private javax.swing.ButtonGroup Availability;
    private javax.swing.JRadioButton Available;
    private javax.swing.JLabel AvailableLabel;
    private javax.swing.JButton BackToPatronHomePage;
    private javax.swing.JLabel BookName;
    private javax.swing.JButton Borrow;
    private javax.swing.JTextField CopLeft;
    private javax.swing.JLabel EstimateLabel;
    private javax.swing.JLabel Gen;
    private javax.swing.JTextField Genre;
    private javax.swing.JComboBox<String> GenreCombo;
    private javax.swing.JLabel GenreLabel;
    private javax.swing.JButton Hold;
    private javax.swing.JRadioButton NotAvailable;
    private javax.swing.JLabel PatSearch;
    private javax.swing.JComboBox<String> PatronCombo;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchBar;
    private javax.swing.JButton SearchBook;
    private javax.swing.JTable SearchTable;
    private javax.swing.JButton Select;
    private javax.swing.JButton Select1;
    private javax.swing.JButton SelectBook;
    private javax.swing.JTextField Serial;
    private javax.swing.JComboBox<String> SerialCombo;
    private javax.swing.JRadioButton Simple;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JTextField TitleSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
