
import java.awt.Window;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.StringTokenizer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E-Therng
 */
public class RegisterEditDeleteBooks extends javax.swing.JPanel {

    /**
     * Creates new form RegisterEditDeleteBooks
     */
    public RegisterEditDeleteBooks() {
        initComponents();
        Name.setEditable(false);
        Author.setEditable(false);
        Genre.setEnabled(false);
        Price.setEditable(false);
        Copies.setEditable(false);
        Delete.setVisible(false);
        jPanel3.setVisible(false);
        Delete.setEnabled(false);
        Confirm.setVisible(false);
        Confirm.setEnabled(false);
        SearchLabel.setVisible(false);
        SearchBar.setVisible(false);
        BookCombo.setVisible(false);
        Search.setVisible(false);
        jPanel4.setVisible(false);
        Se.setVisible(false);
        Ser.setVisible(false);
        Ser.setEditable(false);
        Edit.setEnabled(false);
        SelectSerial.setVisible(false);
    }
 private String getTodayDate()
    {
        
        //defines the format
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        
        //gets the system datee
        Date todayD = new Date();
        
        //formats today's date as per our format defined in the first line
        String m = df.format(todayD);
        
        return m;
        //will return string m which contains the data.
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        AddBook = new javax.swing.JRadioButton();
        EditBook = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        SearchLabel = new javax.swing.JLabel();
        SearchBar = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        BookCombo = new javax.swing.JComboBox<>();
        SelectSerial = new javax.swing.JComboBox<>();
        Edit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Price = new javax.swing.JTextField();
        Copy = new javax.swing.JLabel();
        Copies = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Name = new javax.swing.JTextField();
        Genre = new javax.swing.JComboBox<>();
        Author = new javax.swing.JTextField();
        Se = new javax.swing.JLabel();
        Ser = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        Confirm = new javax.swing.JRadioButton();
        Delete = new javax.swing.JButton();
        Submit = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setBackground(new java.awt.Color(202, 214, 226));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Register/Edit/Delete Books");

        buttonGroup1.add(AddBook);
        AddBook.setText("Registering New Books");
        AddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBookActionPerformed(evt);
            }
        });

        buttonGroup1.add(EditBook);
        EditBook.setText("Editing Current Books");
        EditBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditBookActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(162, 249, 211));

        SearchLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        SearchLabel.setText("Book Search");

        SearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarActionPerformed(evt);
            }
        });

        Search.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        BookCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Books" }));
        BookCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookComboActionPerformed(evt);
            }
        });

        SelectSerial.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Serial" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BookCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(SearchLabel)
                        .addGap(18, 18, 18)
                        .addComponent(SearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectSerial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchLabel)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BookCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        Edit.setText("Click to Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(243, 196, 192));

        Copy.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Copy.setText("Copies");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("Book Name");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel4.setText("Author");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Genres");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel6.setText("Price");

        Genre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genres" }));

        Author.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorActionPerformed(evt);
            }
        });

        Se.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Se.setText("Serial");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3)
                                .addComponent(jLabel6)
                                .addComponent(Copy))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Copies, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(Author, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Genre, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Se)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Ser, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addGap(150, 150, 150))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(Genre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel6))
                    .addComponent(Price, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Copy)
                    .addComponent(Copies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Se))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(119, 133, 149));

        Confirm.setText("Confirm Deletion");
        Confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmActionPerformed(evt);
            }
        });

        Delete.setText("Delete Book");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addComponent(Confirm)
                .addGap(22, 22, 22))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(50, Short.MAX_VALUE)))
        );

        Submit.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        Submit.setText("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jButton5.setText("Back to Home Page");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddBook)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(EditBook))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(319, 319, 319)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddBook)
                            .addComponent(EditBook))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBookActionPerformed
        SearchLabel.setVisible(false);
        SearchBar.setVisible(false);
        BookCombo.setVisible(false);
        Search.setVisible(false);
        jPanel4.setVisible(false);
        SearchLabel.setEnabled(false);
        SearchBar.setEnabled(false);
        BookCombo.setEnabled(false);
        SearchLabel.setEnabled(false);
        SearchBar.setEnabled(false);
        Search.setEnabled(false);
        Edit.setEnabled(true);
        Delete.setEnabled(false);
        Confirm.setEnabled(false);
        Delete.setVisible(false);
        jPanel3.setVisible(false);
        Confirm.setVisible(false);
        Name.setEditable(false);
        Author.setEditable(false);
        Genre.setEnabled(false);
        Price.setEditable(false);
        Copies.setEditable(false);
        Name.setText("");
        Author.setText("");
        Genre.setSelectedIndex(0);
        Price.setText("");
        Copies.setText("");
    }//GEN-LAST:event_AddBookActionPerformed

    private void EditBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditBookActionPerformed
        SearchLabel.setVisible(true);
        SearchBar.setVisible(true);
        BookCombo.setVisible(true);
        SearchLabel.setVisible(true);
        SearchBar.setVisible(true);
        SearchLabel.setEnabled(true);
        SearchBar.setEnabled(true);
        BookCombo.setEnabled(true);
        SearchLabel.setEnabled(true);
        SearchBar.setEnabled(true);
        Search.setEnabled(true);
        Search.setVisible(true);
        jPanel4.setVisible(true);
        Edit.setEnabled(false);

        Name.setEditable(false);
        Author.setEditable(false);
        Genre.setEnabled(false);
        Price.setEditable(false);
        Copies.setEditable(false);
        Delete.setVisible(false);
        jPanel3.setVisible(false);
        Delete.setEnabled(false);
        Confirm.setVisible(false);
        Confirm.setEnabled(false);

        Name.setText("");
        Author.setText("");
        Genre.setSelectedIndex(0);
        Price.setText("");
        Copies.setText("");
    }//GEN-LAST:event_EditBookActionPerformed

    private void SearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchBarActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        if(SearchBar.getText().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter Book Name!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else{
            try{
                BookCombo.removeAllItems();
                BookCombo.addItem("Select Book");
                SelectSerial.removeAllItems();
                SelectSerial.addItem("Select Serial");

                String na = SearchBar.getText();
                FileReader fr = new FileReader("MainBook.txt");
                BufferedReader br = new BufferedReader(fr);
                String r ="";
                while((r=br.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(r,",");
                    String n = tk.nextToken();
                    String auth = tk.nextToken();
                    String gen = tk.nextToken();
                    String pr = tk.nextToken();
                    int copies = Integer.parseInt(tk.nextToken());
                    String av = tk.nextToken();
                    String del = tk.nextToken();
                    int bookse = Integer.parseInt(tk.nextToken());

                    if(n.contains(na))
                    {
                        BookCombo.addItem(n);
                        SelectSerial.addItem(bookse+"");
                    }

                }
                br.close();
            }
            catch(Exception e)
            {
            }
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void BookComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookComboActionPerformed
        if(BookCombo.getSelectedIndex()>0)
        {
            Edit.setEnabled(true);
        }
        SelectSerial.setSelectedIndex(BookCombo.getSelectedIndex());
    }//GEN-LAST:event_BookComboActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        Name.setEditable(true);
        Author.setEditable(true);
        Genre.setEnabled(true);
        Price.setEditable(true);
        Copies.setEditable(true);

        Genre.addItem("Poetry");
        Genre.addItem("Fiction");
        Genre.addItem("Fantasy");
        Genre.addItem("Science Fiction");
        Genre.addItem("Mystery");
        Genre.addItem("Biography");
        Genre.addItem("Drama");
        Genre.addItem("Nonfiction");

        Submit.setEnabled(true);

        if(EditBook.isSelected() && BookCombo.getSelectedIndex()!=0)
        {
            String sel = SelectSerial.getSelectedItem().toString();
            Delete.setVisible(true);
            jPanel3.setVisible(true);
            Delete.setEnabled(true);
            Confirm.setVisible(true);
            Confirm.setEnabled(true);

            try{

                String book = BookCombo.getSelectedItem()+"";
                FileReader fr = new FileReader("MainBook.txt");
                BufferedReader br = new BufferedReader(fr);
                String r ="";
                while((r=br.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(r,",");
                    String name = tk.nextToken();
                    String auth = tk.nextToken();
                    String gen = tk.nextToken();
                    String pr = tk.nextToken();
                    int copies = Integer.parseInt(tk.nextToken());
                    String av = tk.nextToken();
                    String del = tk.nextToken();
                    String bookse = tk.nextToken();
                    if(sel.equals(bookse))
                    {
                        Name.setText(name);
                        Author.setText(auth);
                        Genre.setSelectedItem(gen);
                        Price.setText(pr);
                        Ser.setText(bookse+"");
                        SelectSerial.setSelectedItem(bookse);
                        Copies.setText(copies+"");
                    }
                    if(sel.equals(bookse) && del.equals("1"))
                    {
                        Delete.setText("Delete Book");
                        Confirm.setText("Confirm Deletion");
                    }
                    if(sel.equals(bookse) && del.equals("0"))
                    {
                        Delete.setText("Restore Book");
                        Confirm.setText("Confirm Restoration");
                    }
                }

                br.close();
            }
            catch(Exception e)
            {
            }

        }
        if(EditBook.isSelected() && BookCombo.getSelectedIndex()==0)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Select Patron!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EditActionPerformed

    private void AuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AuthorActionPerformed

    private void ConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConfirmActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        if(Confirm.isSelected()==false)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Click Confirm!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            boolean de = true;
            try{
                int serial = Integer.parseInt(Ser.getText());
                ArrayList<String>restoreList = new ArrayList<String>();

                FileReader fr = new FileReader("MainBook.txt");
                BufferedReader br = new BufferedReader(fr);
                String r ="";
                while((r=br.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(r,",");
                    String name = tk.nextToken();
                    String auth = tk.nextToken();
                    String gen = tk.nextToken();
                    String pr = tk.nextToken();
                    int copies = Integer.parseInt(tk.nextToken());
                    String av = tk.nextToken();
                    String del = tk.nextToken();
                    int bookse = Integer.parseInt(tk.nextToken());
                    if(serial==bookse && del.equals("1"))
                    {
                        restoreList.add(name + "," + auth + "," + gen + "," + pr + "," + copies + "," + av + "," + "0" + "," + bookse);
                    }
                    else if(serial==bookse && del.equals("0"))
                    {
                        restoreList.add(name + "," + auth + "," + gen + "," + pr + "," + copies + "," + av + "," + "1" + "," + bookse);
                        de = false;
                    }
                    else
                    {
                        restoreList.add(r);//added the record to the array list
                    }
                }
                br.close();
                //write code to transfer arraylist to the file

                FileWriter fw = new FileWriter("MainBook.txt",false);
                PrintWriter pr = new PrintWriter(fw);

                for(int i=0; i<restoreList.size(); i++)
                {
                    String s = restoreList.get(i);
                    pr.println(s);
                }
                pr.close();
            }
            catch(Exception e)
            {
                javax.swing.JOptionPane.showMessageDialog(null, "Error in Deleting/Restoring Data!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

            try{
                String serial = Ser.getText();
                ArrayList<String>restoreList = new ArrayList<String>();

                FileReader fr = new FileReader("Book.txt");
                BufferedReader br = new BufferedReader(fr);
                String r ="";

                while((r=br.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(r,",");
                    String name = tk.nextToken();
                    String auth = tk.nextToken();
                    String gen = tk.nextToken();
                    String pr = tk.nextToken();
                    String available = tk.nextToken();
                    String del = tk.nextToken();
                    String bookse = tk.nextToken();
                    String se = tk.nextToken();
                    if(serial.equals(se))
                    {
                        //nothing required as this is the name to be deleted
                    }
                    else
                    {
                        restoreList.add(r);//added the record to the array list
                    }
                }
                br.close();

                //write code to transfer arraylist to the file

                FileWriter fw = new FileWriter("Book.txt",false);
                PrintWriter pr = new PrintWriter(fw);

                for(int i=0; i<restoreList.size(); i++)
                {
                    String s = restoreList.get(i);
                    pr.println(s);
                }
                pr.close();
                if(de==true)
                {
                    FileWriter TransInfo = new FileWriter("Transactions.txt", true);
                    PrintWriter TransWriter = new PrintWriter(TransInfo);

                    TransWriter.println("Delete,Book" + "," + serial + "," + getTodayDate()) ;
                    TransWriter.close();

                    javax.swing.JOptionPane.showMessageDialog(null, "Book Deleted!", "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {

                    FileWriter TransInfo = new FileWriter("Transactions.txt", true);
                    PrintWriter TransWriter = new PrintWriter(TransInfo);

                    TransWriter.println("Restore,Book" + "," + serial + "," + getTodayDate()) ;
                    TransWriter.close();

                    javax.swing.JOptionPane.showMessageDialog(null, "Book Restored!", "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            }
            catch(Exception e)
            {
                javax.swing.JOptionPane.showMessageDialog(null, "Error in Deleting/Restoring Data!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        AdminHomePage f1 = new AdminHomePage();

        f1.show();

        ((Window)getRootPane().getParent()).dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
  boolean err=false;
        if(Name.getText().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter Book Name!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=true;
        }
        if(Author.getText().equals("") && err==false)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter Author!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=true;
        }
        if(Genre.getSelectedIndex()==0 && err==false)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter Genre!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=true;
        }
        if(Price.getText().equals("") && err==false)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter Price!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=true;
        }
        if(Price.getText().equals("")==false && err==false)
        {
        try {
   int x = Integer.parseInt(Price.getText());
 }catch(NumberFormatException e) {
   javax.swing.JOptionPane.showMessageDialog(null, "Price Needs To Be An Integer!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=true;
 }
        }
        if(Copies.getText().equals("") && err==false)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter Copies!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=true;
        }
        if(Copies.getText().equals("")==false && err==false)
        {
        try {
   int x = Integer.parseInt(Copies.getText());
 }catch(NumberFormatException e) {
   javax.swing.JOptionPane.showMessageDialog(null, "Copies Needs To Be An Integer!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=true;
 }
        }
        if(Integer.parseInt(Copies.getText())<1 && err==false)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Copies has To Be Greater Than Or Equal To 1!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=true;
        }
        if(err==false)
            {
        if(AddBook.isSelected())
        {
            try{
                FileReader fr = new FileReader("Book.txt");
            BufferedReader br = new BufferedReader(fr);
            String r ="";
           int serial = 0;
           int bookser = 0;
           System.out.println("hi");
            while((r=br.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String name = tk.nextToken();
                String auth = tk.nextToken();
                String gen = tk.nextToken();
                String pr = tk.nextToken();
                String av = tk.nextToken();
                String del = tk.nextToken();
                int bookse = Integer.parseInt(tk.nextToken());
                int se = Integer.parseInt(tk.nextToken());
                
                if(bookser<bookse)
                {
                    bookser = bookse;
                }
                if(serial<se)
                {
                    serial=se;
                }
            }
            
            br.close();
            bookser = bookser + 1;
            for(int i=0; i<Integer.parseInt(Copies.getText()); i++)
            {
            serial = serial + 1;
                
          FileWriter BookInfo = new FileWriter("Book.txt", true);
                    PrintWriter BookWriter = new PrintWriter(BookInfo);
                    
                    BookWriter.println(Name.getText() +"," + Author.getText() +"," + Genre.getSelectedItem() +"," + Price.getText() + ",Y,1," + bookser + "," +serial+"") ;
                    BookWriter.close();
         
            }
            FileWriter MainBookInfo = new FileWriter("MainBook.txt", true);
                    PrintWriter MainBookWriter = new PrintWriter(MainBookInfo);
                    
                    MainBookWriter.println(Name.getText() +"," + Author.getText() +"," + Genre.getSelectedItem() +"," + Price.getText() + "," + Copies.getText() + "," + "Y" + "," + "1" + "," + bookser);
                    MainBookWriter.close();
            javax.swing.JOptionPane.showMessageDialog(null, "Book Added!", "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
          catch(Exception e)
          {
              
          }
        }
        
        
        if(EditBook.isSelected())
            {
                int makecopies = 0;
                boolean er = false;
            String na = Name.getText();
            String author = Author.getText();
            String genre = Genre.getSelectedItem()+"";
            String price = Price.getText();
            int copy = Integer.parseInt(Copies.getText());
            String serial = Ser.getText();
            String bookserial = SelectSerial.getSelectedItem().toString();
            
            int x = 0;
            try{
            
            
            FileReader fr = new FileReader("Book.txt");
            BufferedReader br = new BufferedReader(fr);
            String r ="";
           
            while((r=br.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String name = tk.nextToken();
                String auth = tk.nextToken();
                String gen = tk.nextToken();
                String pr = tk.nextToken();
                String av = tk.nextToken();
                String del = tk.nextToken();
                String bookse = tk.nextToken();
                String se = tk.nextToken();
                if(bookse.equals(bookserial) && av.equals("Y"))
                {
                   x=x+1;
                }
            }
        }
        catch(Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Error in Editing Data!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
            boolean posneg = true;
            int remcopy = 0;
            try{
                FileReader fr = new FileReader("MainBook.txt");
            BufferedReader br = new BufferedReader(fr);
            String r ="";
            
            while((r=br.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String name = tk.nextToken();
                String auth = tk.nextToken();
                String gen = tk.nextToken();
                String pr = tk.nextToken();
                int copies = Integer.parseInt(tk.nextToken());
                String av = tk.nextToken();
                String del = tk.nextToken();
                String bookse = tk.nextToken();
                
                if(bookse.equals(bookserial) && av.equals("N") && copies>copy)
                {
                    javax.swing.JOptionPane.showMessageDialog(null, "You Cannot Reduce Copies! Someone Is Borrowing The Book!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
                er = true;
                }
                if(bookse.equals(bookserial) && copy>copies)
                {
                    makecopies = copy-copies;
                    
                }
                if(bookse.equals(bookserial) && copies>copy && av.equals("Y"))
                {
                    remcopy = Math.abs(copies-copy);
                    if(x>=remcopy)
                    {
                        posneg = false;
                    }
                    else
                    {
                        javax.swing.JOptionPane.showMessageDialog(null, "You Cannot Reduce That Many Copies! Someone Is Borrowing The Book!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
                er = true;
                    }
                }
                
            }
            }
            catch(Exception e)
            {
                javax.swing.JOptionPane.showMessageDialog(null, "Error In Reading Data!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            
            if(er==false)
            {
                try{
            
            
            ArrayList<String>restoreList = new ArrayList<String>();
            
            FileReader fr = new FileReader("Book.txt");
            BufferedReader br = new BufferedReader(fr);
            String r ="";
           
            while((r=br.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String name = tk.nextToken();
                String auth = tk.nextToken();
                String gen = tk.nextToken();
                String pr = tk.nextToken();
                String av = tk.nextToken();
                String del = tk.nextToken();
                String bookse = tk.nextToken();
                String se = tk.nextToken();
                if(bookse.equals(bookserial))
                {
                   restoreList.add(na + "," + author + "," + genre + "," + price + "," + av + "," + del + "," + bookserial + "," + se);
                }
                else
                {
                    restoreList.add(r);//added the record to the array list
                }
            }
            br.close();
            
            
            FileWriter fw = new FileWriter("Book.txt",false);
            PrintWriter pr = new PrintWriter(fw);
            
            for(int i=0; i<restoreList.size(); i++)
            {
                String s = restoreList.get(i);
                pr.println(s);
            }
            pr.close();
        }
        catch(Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Error in Editing Data!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
                
           if(makecopies>0 && posneg == true)
           {
               try{
                ArrayList<String>restoreList = new ArrayList<String>();
                FileReader fr = new FileReader("Book.txt");
            BufferedReader br = new BufferedReader(fr);
            String r ="";
           int serrial = 0;
           int bookser = Integer.parseInt(SelectSerial.getSelectedItem().toString());
            while((r=br.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String name = tk.nextToken();
                String auth = tk.nextToken();
                String gen = tk.nextToken();
                String pr = tk.nextToken();
                String av = tk.nextToken();
                String del = tk.nextToken();
                String bookse = tk.nextToken();
                int se = Integer.parseInt(tk.nextToken());
                if(bookse.equals(bookserial) && makecopies>0 && del.equals("0"))
                {
                    restoreList.add(na + "," + author + "," + genre + "," + price + "," + av + ",1," + bookserial + "," + se);
                    makecopies = makecopies - 1;
                }
                else
                {
                    restoreList.add(r);
                }
            }
            br.close();
                
          FileWriter BookInfo = new FileWriter("Book.txt", false);
                    PrintWriter BookWriter = new PrintWriter(BookInfo);
                    
                    for(int i=0; i<restoreList.size(); i++)
            {
                
                    String s = restoreList.get(i);
                BookWriter.println(s);
            }
            BookWriter.close();
            }
           
               catch(Exception e)
               {
                   
               }
               try{
                
                FileReader fr = new FileReader("Book.txt");
            BufferedReader br = new BufferedReader(fr);
            String r ="";
           int serrial = 0;
           int bookser = Integer.parseInt(SelectSerial.getSelectedItem().toString());
            while((r=br.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String name = tk.nextToken();
                String auth = tk.nextToken();
                String gen = tk.nextToken();
                String pr = tk.nextToken();
                String av = tk.nextToken();
                String del = tk.nextToken();
                int bookse = Integer.parseInt(tk.nextToken());
                int se = Integer.parseInt(tk.nextToken());
                if(serrial<se)
                {
                    serrial=se;
                }
            }
            br.close();
            for(int i=0; i<makecopies; i++)
            {
            serrial = serrial + 1;
                
          FileWriter BookInfo = new FileWriter("Book.txt", true);
                    PrintWriter BookWriter = new PrintWriter(BookInfo);
                    
                    BookWriter.println(Name.getText() +"," + Author.getText() +"," + Genre.getSelectedItem() +"," + Price.getText() + ",Y,1," + bookser + "," +serrial+"") ;
                    BookWriter.close();
         
            }
           }
               catch(Exception e)
               {
                   
               }
           }
                System.out.println(posneg);
           if(posneg==false && remcopy>0)
        {
            System.out.println("hi");
            try{
                ArrayList<String>restoreList = new ArrayList<String>();
                FileReader fr = new FileReader("Book.txt");
            BufferedReader br = new BufferedReader(fr);
            String r ="";
            while((r=br.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String name = tk.nextToken();
                String auth = tk.nextToken();
                String gen = tk.nextToken();
                String pr = tk.nextToken();
                String av = tk.nextToken();
                String del = tk.nextToken();
                String bookse = tk.nextToken();
                int se = Integer.parseInt(tk.nextToken());
               if(bookse.equals(bookserial) && remcopy>0 && av.equals("Y") && del.equals("1"))
                {
                    restoreList.add(na + "," + author + "," + genre + "," + price + "," + av + ",0," + bookserial + "," + se);
                    remcopy = remcopy - 1;
                }
                else
                {
                    restoreList.add(r);
                }
            }
            br.close();
            FileWriter BookInfo = new FileWriter("Book.txt", false);
                    PrintWriter BookWriter = new PrintWriter(BookInfo);
            for(int i=0; i<restoreList.size(); i++)
            {
                
                    String s = restoreList.get(i);
                BookWriter.println(s);
            }
            BookWriter.close();
            }
            catch(Exception e)
            {
                
            }
            }
           
           try{
            
            
            ArrayList<String>restoreList = new ArrayList<String>();
            
            FileReader fr = new FileReader("MainBook.txt");
            BufferedReader br = new BufferedReader(fr);
            String r ="";
           
            while((r=br.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String name = tk.nextToken();
                String auth = tk.nextToken();
                String gen = tk.nextToken();
                String pr = tk.nextToken();
                String copies = tk.nextToken();
                String av = tk.nextToken();
                String del = tk.nextToken();
                String bookse = tk.nextToken();
                if(bookse.equals(bookserial))
                {
                   restoreList.add(na + "," + author + "," + genre + "," + price + "," + copy  + "," + av + "," + del + "," + bookse);
                }
                else
                {
                    restoreList.add(r);//added the record to the array list
                }
            }
            br.close();
            
            
            FileWriter fw = new FileWriter("MainBook.txt",false);
            PrintWriter pr = new PrintWriter(fw);
            
            for(int i=0; i<restoreList.size(); i++)
            {
                String s = restoreList.get(i);
                pr.println(s);
            }
            pr.close();
            javax.swing.JOptionPane.showMessageDialog(null, "Book Edited!", "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
        catch(Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Error in Editing Data!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        
            }
        
            }
            }
    }//GEN-LAST:event_SubmitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton AddBook;
    private javax.swing.JTextField Author;
    private javax.swing.JComboBox<String> BookCombo;
    private javax.swing.JRadioButton Confirm;
    private javax.swing.JTextField Copies;
    private javax.swing.JLabel Copy;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Edit;
    private javax.swing.JRadioButton EditBook;
    private javax.swing.JComboBox<String> Genre;
    private javax.swing.JTextField Name;
    private javax.swing.JTextField Price;
    private javax.swing.JLabel Se;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchBar;
    private javax.swing.JLabel SearchLabel;
    private javax.swing.JComboBox<String> SelectSerial;
    private javax.swing.JTextField Ser;
    private javax.swing.JButton Submit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
