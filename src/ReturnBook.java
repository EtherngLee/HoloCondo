
import java.awt.Window;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import static java.util.Collections.list;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E-Therng
 */
public class ReturnBook extends javax.swing.JPanel {
    DefaultTableModel model;
    int patser = 0;
    int user = 0;
    /**
     * Creates new form ReturnBook
     */
    ArrayList<String>BookNameList = new ArrayList<String>();
    public ReturnBook() {
        initComponents();
        SelectBook.setEnabled(false);
        SerialCombo.setEnabled(false);
        SerialCombo.setVisible(false);
        boolean x = true;
        try {
            FileReader fr = new FileReader("CurrentUser.txt");
            BufferedReader br = new BufferedReader(fr);
            String r = "";
            while ((r = br.readLine()) != null) {
                StringTokenizer tk = new StringTokenizer(r, ",");
                String pat = tk.nextToken();
                patser = Integer.parseInt(pat);
                }
        } catch (Exception e) {
            x=false;
        }
        
        if(x==true)
        {
            user = patser;
            try {
            FileReader fr = new FileReader("Patron.txt");
            BufferedReader br = new BufferedReader(fr);
            String r = "";
            while ((r = br.readLine()) != null) {
                StringTokenizer tk = new StringTokenizer(r, ",");
                String block = tk.nextToken();
                String floor = tk.nextToken();
                String n = tk.nextToken();
                String hpn = tk.nextToken();
                String email = tk.nextToken();
                String mem = tk.nextToken();
                String del = tk.nextToken();
                int ser = Integer.parseInt(tk.nextToken());
                if (patser==ser) {
                    PatronCombo.removeAllItems();
                    PatronCombo.addItem(n);
                }
            }
            br.close();
        } catch (Exception e) {

        }
        }
        
        Return.setEnabled(false);
        Renew.setEnabled(false);
        ReportDmg.setEnabled(false);
        model = (DefaultTableModel) Table.getModel();
            
            model.setRowCount(0);
               
        
    }
    private String getTodayDate()
    {
        
        //defines the format
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        
        //gets the system datee
        Date todayD = new Date();
        
        //formats today's date as per our format defined in the first line
        String m = df.format(todayD);
        
        return m;
        //will return string m which contains the data.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        PatronCombo = new javax.swing.JComboBox<>();
        Select = new javax.swing.JButton();
        Select1 = new javax.swing.JButton();
        PatSearch = new javax.swing.JLabel();
        SearchBar = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        SerialCombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        Search1 = new javax.swing.JButton();
        ShowAll = new javax.swing.JButton();
        SelectBook = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        Return = new javax.swing.JButton();
        Renew = new javax.swing.JButton();
        ReportDmg = new javax.swing.JButton();
        BackToAdminoHomePage = new javax.swing.JButton();

        setBackground(new java.awt.Color(202, 214, 226));

        jPanel3.setBackground(new java.awt.Color(162, 249, 211));

        PatronCombo.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        PatronCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Patron Name" }));
        PatronCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatronComboActionPerformed(evt);
            }
        });

        Select.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Select.setText("Sign In");
        Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectActionPerformed(evt);
            }
        });

        Select1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Select1.setText("Sign Out");
        Select1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select1ActionPerformed(evt);
            }
        });

        PatSearch.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        PatSearch.setText("Patron Search");

        SearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarActionPerformed(evt);
            }
        });

        Search.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        SerialCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Serial" }));
        SerialCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SerialComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(Select, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87)
                                .addComponent(Select1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addComponent(PatronCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(SerialCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(PatSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchBar)
                        .addGap(18, 18, 18)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PatSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PatronCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SerialCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Select, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Select1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Return/Renew Books");

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Book Name", "Due Date", "Overdue?", "Renewable?", "Patron Name", "Apartment No.", "Patron Serial", "BookSerial", "MainBookSerial"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(6).setMinWidth(0);
            Table.getColumnModel().getColumn(6).setPreferredWidth(0);
            Table.getColumnModel().getColumn(6).setMaxWidth(0);
            Table.getColumnModel().getColumn(7).setMinWidth(0);
            Table.getColumnModel().getColumn(7).setPreferredWidth(0);
            Table.getColumnModel().getColumn(7).setMaxWidth(0);
            Table.getColumnModel().getColumn(8).setMinWidth(0);
            Table.getColumnModel().getColumn(8).setPreferredWidth(0);
            Table.getColumnModel().getColumn(8).setMaxWidth(0);
        }

        Search1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Search1.setText("Patron Specific");
        Search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search1ActionPerformed(evt);
            }
        });

        ShowAll.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        ShowAll.setText("Show All");
        ShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllActionPerformed(evt);
            }
        });

        SelectBook.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        SelectBook.setText("Select Book");
        SelectBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectBookActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(243, 196, 192));

        Return.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        Return.setText("Return");
        Return.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnActionPerformed(evt);
            }
        });

        Renew.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        Renew.setText("Renew");
        Renew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RenewActionPerformed(evt);
            }
        });

        ReportDmg.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        ReportDmg.setText("Report Damage/Missing");
        ReportDmg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportDmgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ReportDmg, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Return, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Renew, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Return, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Renew, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ReportDmg, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        BackToAdminoHomePage.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        BackToAdminoHomePage.setText("Back to Home Page");
        BackToAdminoHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToAdminoHomePageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(242, 242, 242)
                                .addComponent(Search1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ShowAll, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(207, 207, 207))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(SelectBook, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(326, 326, 326))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackToAdminoHomePage)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(193, 193, 193))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(157, 157, 157))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BackToAdminoHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Search1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ShowAll, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SelectBook, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void PatronComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatronComboActionPerformed
        if(PatronCombo.getSelectedIndex()>0)
        {
            SerialCombo.setSelectedIndex(PatronCombo.getSelectedIndex());
        }
    }//GEN-LAST:event_PatronComboActionPerformed

    private void SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectActionPerformed
        if(SerialCombo.getSelectedIndex()==0)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Please Select Patron!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else
        {

            try{
                user = Integer.parseInt(SerialCombo.getSelectedItem().toString());
                FileWriter PatInfo = new FileWriter("CurrentUser.txt", false);
                PrintWriter PatWriter = new PrintWriter(PatInfo);
                String x = getTodayDate();
                PatWriter.println(SerialCombo.getSelectedItem().toString());
                PatWriter.close();
            }
            catch(Exception e)
            {

            }
        }
    }//GEN-LAST:event_SelectActionPerformed

    private void Select1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select1ActionPerformed
        try{

            FileWriter PatInfo = new FileWriter("CurrentUser.txt", false);
            PrintWriter PatWriter = new PrintWriter(PatInfo);
            String x = getTodayDate();
            PatWriter.println("");
            PatWriter.close();
            PatronCombo.removeAllItems();
            PatronCombo.addItem("Select Patron");
            SearchBar.setText("");
        }
        catch(Exception e)
        {

        }
    }//GEN-LAST:event_Select1ActionPerformed

    private void SearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchBarActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        if(SearchBar.getText().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter Patron Name!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else{
            try{
                PatronCombo.removeAllItems();
                PatronCombo.addItem("Patron Name");
                SerialCombo.removeAllItems();
                SerialCombo.addItem("Serial");
                String na = SearchBar.getText();
                FileReader fr = new FileReader("Patron.txt");
                BufferedReader br = new BufferedReader(fr);
                String r ="";

                while((r=br.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(r,",");
                    String block = tk.nextToken();
                    String floor = tk.nextToken();
                    String n = tk.nextToken();
                    String hpn = tk.nextToken();
                    String email = tk.nextToken();
                    String mem = tk.nextToken();
                    String del = tk.nextToken();
                    String ser = tk.nextToken();
                    if(n.contains(na))
                    {
                        PatronCombo.addItem(n + ": " + block + "," + floor);
                        SerialCombo.addItem(ser);
                    }
                }
                br.close();
            }
            catch(Exception e)
            {
            }
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void SerialComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SerialComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SerialComboActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked

    }//GEN-LAST:event_TableMouseClicked

    private void Search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search1ActionPerformed
        model.setRowCount(0);
        Return.setEnabled(false);
        ReportDmg.setEnabled(false);
        Renew.setEnabled(false);
        ArrayList<String>MainBookSerial = new ArrayList<String>();
        ArrayList<String>BookSerial = new ArrayList<String>();
        ArrayList<String>BookSeriall = new ArrayList<String>();
        ArrayList<String>BookName = new ArrayList<String>();
        ArrayList<String>PatronSeriall = new ArrayList<String>();
        ArrayList<String>PatronName = new ArrayList<String>();
        ArrayList<String>Renew = new ArrayList<String>();
        ArrayList<String>DueDate = new ArrayList<String>();
        ArrayList<String>Apar = new ArrayList<String>();

        boolean yes = true;
        patser = user;
        try
        {
            FileReader br = new FileReader("Borrow.txt");
            BufferedReader bur = new BufferedReader(br);
            String re ="";
            while((re=bur.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(re,",");
                int patron = Integer.parseInt(tk.nextToken());
                int bookse = Integer.parseInt(tk.nextToken());
                String se = tk.nextToken();
                int renew = Integer.parseInt(tk.nextToken());
                String due = tk.nextToken();

                if(patser==patron)
                {
                    yes = false;
                    PatronSeriall.add(patron+"");
                    BookSerial.add(se);
                    Renew.add(renew+"");
                    DueDate.add(due);
                    MainBookSerial.add(bookse+"");
                }
            }

        }

        catch(Exception e)
        {

        }
        if(yes==true)
        {
            SelectBook.setEnabled(false);
            javax.swing.JOptionPane.showMessageDialog(null, "No Books Found!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else{
            try
            {
                SelectBook.setEnabled(true);
                for(int i=0; i<BookSerial.size(); i++)
                {
                    String s = BookSerial.get(i);
                    FileReader brr = new FileReader("Book.txt");
                    BufferedReader burr = new BufferedReader(brr);
                    String re ="";
                    while((re=burr.readLine())!=null)
                    {
                        StringTokenizer tk = new StringTokenizer(re,",");
                        String name = tk.nextToken();
                        String auth = tk.nextToken();
                        String gen = tk.nextToken();
                        String pr = tk.nextToken();
                        String av = tk.nextToken();
                        String del = tk.nextToken();
                        int bookse = Integer.parseInt(tk.nextToken());
                        String se = tk.nextToken();

                        if(s.equals(se))
                        {
                            BookName.add(name);
                            BookSeriall.add(se);
                        }
                    }

                }

            }

            catch(Exception e)
            {

            }

            try
            {
                for(int i=0; i<PatronSeriall.size(); i++)
                {
                    String s = PatronSeriall.get(i);
                    FileReader prr = new FileReader("Patron.txt");
                    BufferedReader purr = new BufferedReader(prr);
                    String re ="";
                    while((re=purr.readLine())!=null)
                    {
                        StringTokenizer tk = new StringTokenizer(re,",");
                        String block = tk.nextToken();
                        String floor = tk.nextToken();
                        String n = tk.nextToken();
                        String hpn = tk.nextToken();
                        String email = tk.nextToken();
                        String mem = tk.nextToken();
                        String del = tk.nextToken();
                        String serial = tk.nextToken();

                        if(s.equals(serial))
                        {
                            PatronName.add(n);

                            Apar.add(block + "," + floor);
                        }
                    }
                }
            }

            catch(Exception e)
            {

            }
            try
            {
                boolean err=false;
                for(int i=0; i<BookName.size(); i++)
                {
                    String bokser = BookSeriall.get(i);
                    String book = BookName.get(i);
                    String patron = PatronName.get(i);
                    String bookser = MainBookSerial.get(i);
                    int patronser = Integer.parseInt(PatronSeriall.get(i));
                    int renew = Integer.parseInt(Renew.get(i));
                    String apar = Apar.get(i);
                    String due = DueDate.get(i);

                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                    Date firstDate = sdf.parse(getTodayDate());
                    Date secondDate = sdf.parse(due);

                    long Overdueornot = secondDate.getTime() - firstDate.getTime();

                    String overdue = "Not Overdue";
                    if(Overdueornot<0)
                    {
                        overdue = "Overdue";
                    }
                    String ren = "";
                    if(renew==1)
                    {
                        ren = "Yes";
                    }
                    else
                    {
                        ren = "No";
                    }
                    model.insertRow(model.getRowCount(), new Object[]{book,due,overdue,ren,patron,apar,patronser,bokser,bookser});

                }

            }
            catch(Exception e)
            {

            }
        }
    }//GEN-LAST:event_Search1ActionPerformed

    private void ShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllActionPerformed
        model.setRowCount(0);
        Return.setEnabled(false);
        ReportDmg.setEnabled(false);
        Renew.setEnabled(false);
        ArrayList<String>BookSerial = new ArrayList<String>();
        ArrayList<String>BookName = new ArrayList<String>();
        ArrayList<String>PatronSerial = new ArrayList<String>();
        ArrayList<String>PatronName = new ArrayList<String>();
        ArrayList<String>Renew = new ArrayList<String>();
        ArrayList<String>DueDate = new ArrayList<String>();
        ArrayList<String>Apar = new ArrayList<String>();

        try
        {
            FileReader br = new FileReader("Borrow.txt");
            BufferedReader bur = new BufferedReader(br);
            String re ="";
            while((re=bur.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(re,",");
                int patron = Integer.parseInt(tk.nextToken());
                int bookse = Integer.parseInt(tk.nextToken());
                String se = tk.nextToken();
                int renew = Integer.parseInt(tk.nextToken());
                String due = tk.nextToken();

                PatronSerial.add(patron+"");
                BookSerial.add(se);
                Renew.add(renew+"");
                DueDate.add(due);
            }

        }

        catch(Exception e)
        {

        }
        try
        {
            for(int i=0; i<BookSerial.size(); i++)
            {
                String s = BookSerial.get(i);
                FileReader brr = new FileReader("Book.txt");
                BufferedReader burr = new BufferedReader(brr);
                String re ="";
                while((re=burr.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    String name = tk.nextToken();
                    String auth = tk.nextToken();
                    String gen = tk.nextToken();
                    String pr = tk.nextToken();
                    String av = tk.nextToken();
                    String del = tk.nextToken();
                    int bookse = Integer.parseInt(tk.nextToken());
                    String se = tk.nextToken();

                    if(s.equals(se))
                    {
                        BookName.add(name);
                    }
                }

            }
        }

        catch(Exception e)
        {

        }

        try
        {
            for(int i=0; i<PatronSerial.size(); i++)
            {
                FileReader prr = new FileReader("Patron.txt");
                BufferedReader purr = new BufferedReader(prr);
                String re ="";

                String s = PatronSerial.get(i);
                while((re=purr.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    String block = tk.nextToken();
                    String floor = tk.nextToken();
                    String n = tk.nextToken();
                    String hpn = tk.nextToken();
                    String email = tk.nextToken();
                    String mem = tk.nextToken();
                    String del = tk.nextToken();
                    String serial = tk.nextToken();

                    if(s.equals(serial))
                    {
                        PatronName.add(n);

                        Apar.add(block + "," + floor);
                    }
                }
            }
        }

        catch(Exception e)
        {

        }
        try
        {
            for(int i=0; i<BookName.size(); i++)
            {
                String book = BookName.get(i);
                String patron = PatronName.get(i);
                String bookser = BookSerial.get(i);
                String patronser = PatronSerial.get(i);
                int renew = Integer.parseInt(Renew.get(i));
                String apar = Apar.get(i);
                String due = DueDate.get(i);

                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                Date firstDate = sdf.parse(getTodayDate());
                Date secondDate = sdf.parse(due);

                long Overdueornot = secondDate.getTime() - firstDate.getTime();

                String overdue = "Not Overdue";
                if(Overdueornot<0)
                {
                    overdue = "Overdue";
                }
                String ren = "";
                if(renew==1)
                {
                    ren = "Yes";
                }
                else
                {
                    ren = "No";
                }
                model.insertRow(model.getRowCount(), new Object[]{book,due,overdue,ren,patron,apar,patronser,bookser});
            }
        }
        catch(Exception e)
        {

        }
    }//GEN-LAST:event_ShowAllActionPerformed

    private void SelectBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectBookActionPerformed
        if(Table.getSelectionModel().isSelectionEmpty())
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Select Book!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            Return.setEnabled(true);
            Renew.setEnabled(true);
            ReportDmg.setEnabled(true);
            int row = Table.getSelectedRow();

            ser = Integer.parseInt(Table.getModel().getValueAt(row, 7)+"");
            System.out.println(ser);
            patser = Integer.parseInt(Table.getModel().getValueAt(row, 6)+"");

            String patn = Table.getModel().getValueAt(row, 4).toString();

            String bookn = Table.getModel().getValueAt(row, 0).toString();

            javax.swing.JOptionPane.showMessageDialog(null, "You Selected:" + "\n" + "Patron: " + patn + "\n" + "Book: " + bookn, "Message: Selected!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_SelectBookActionPerformed

    private void ReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnActionPerformed
        if(Table.getSelectionModel().isSelectionEmpty())
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Select Book!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else
        {

            boolean ovr = false;
            long diff = 0;
            try{
                //Add overdue
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                Date Today = sdf.parse(getTodayDate());

                FileReader crr = new FileReader("Payment.txt");
                BufferedReader bbr = new BufferedReader(crr);
                String re ="";
                while((re=bbr.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    String name = tk.nextToken();
                    int patron = Integer.parseInt(tk.nextToken());
                    int bookse = Integer.parseInt(tk.nextToken());
                    String date = tk.nextToken();

                    if(name.equals("Overdue") && patron==patser && bookse == ser)
                    {
                        System.out.println("Overdue");
                        Date DueDate = sdf.parse(date);
                        ovr = true;
                        long diffInMillies = Math.abs(Today.getTime() - DueDate.getTime());
                        diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
                    }

                }
            }
            catch(Exception e)
            {
            }

            try
            {
                ArrayList<String>restoreList = new ArrayList<String>();
                FileReader crr = new FileReader("Borrow.txt");
                BufferedReader bbr = new BufferedReader(crr);
                String re ="";
                int ren = 0;
                while((re=bbr.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    int patron = Integer.parseInt(tk.nextToken());
                    int bookse = Integer.parseInt(tk.nextToken());
                    int se = Integer.parseInt(tk.nextToken());
                    int renew = Integer.parseInt(tk.nextToken());
                    String due = tk.nextToken();
                    if(patron==patser && se==ser)
                    {

                    }
                    else
                    {
                        restoreList.add(re);
                    }
                }
                FileWriter fw = new FileWriter("Borrow.txt",false);
                PrintWriter pr = new PrintWriter(fw);

                for(int i=0; i<restoreList.size(); i++)
                {
                    String s = restoreList.get(i);
                    pr.println(s);
                }
                pr.close();
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                String curdate = getTodayDate();
                FileWriter BookInfo = new FileWriter("Transactions.txt", true);
                PrintWriter BookWriter = new PrintWriter(BookInfo);

                BookWriter.println("Return" + "," + patser + "," + ser  + "," + curdate);
                BookWriter.close();
            }
            catch(Exception e)
            {

            }
            int mainbok = 0;
            try
            {
                ArrayList<String>restoreList = new ArrayList<String>();
                FileReader crr = new FileReader("Book.txt");
                BufferedReader bbr = new BufferedReader(crr);
                String re ="";
                int ren = 0;

                while((re=bbr.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    String name = tk.nextToken();
                    String auth = tk.nextToken();
                    String gen = tk.nextToken();
                    String pr = tk.nextToken();
                    String av = tk.nextToken();
                    String del = tk.nextToken();
                    int bookse = Integer.parseInt(tk.nextToken());
                    int se = Integer.parseInt(tk.nextToken());
                    if(se==ser)
                    {
                        restoreList.add(name + "," + auth + "," + gen + "," + pr + "," + "Y" + "," + del + "," + bookse + "," + se);
                        mainbok = bookse;
                    }
                    else
                    {
                        restoreList.add(re);
                    }
                }
                FileWriter fw = new FileWriter("Book.txt",false);
                PrintWriter pr = new PrintWriter(fw);

                for(int i=0; i<restoreList.size(); i++)
                {
                    String s = restoreList.get(i);
                    pr.println(s);
                }
                pr.close();
            }
            catch(Exception e)
            {

            }
            try
            {
                ArrayList<String>restoreList = new ArrayList<String>();
                FileReader crr = new FileReader("MainBook.txt");
                BufferedReader bbr = new BufferedReader(crr);
                String re ="";
                int ren = 0;
                while((re=bbr.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    String name = tk.nextToken();
                    String auth = tk.nextToken();
                    String gen = tk.nextToken();
                    String pr = tk.nextToken();
                    int copies = Integer.parseInt(tk.nextToken());
                    String av = tk.nextToken();
                    String del = tk.nextToken();
                    int bookse = Integer.parseInt(tk.nextToken());
                    if(bookse==mainbok)
                    {
                        restoreList.add(name + "," + auth + "," + gen + "," + pr + "," + copies + "," + "Y" + "," + del + "," + bookse);
                    }
                    else
                    {
                        restoreList.add(re);
                    }
                }
                FileWriter fw = new FileWriter("MainBook.txt",false);
                PrintWriter pr = new PrintWriter(fw);

                for(int i=0; i<restoreList.size(); i++)
                {
                    String s = restoreList.get(i);
                    pr.println(s);
                }
                pr.close();

            }

            catch(Exception e)
            {

            }
            if(ovr==false)
            {
                javax.swing.JOptionPane.showMessageDialog(null, "Book Returned!", "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
            if(ovr==true)
            {
                javax.swing.JOptionPane.showMessageDialog(null, "Book Returned!" + "\n" + "The Overdue Fee is: RM" + diff, "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
            ShowAll.doClick();
        }
    }//GEN-LAST:event_ReturnActionPerformed

    private void ReportDmgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportDmgActionPerformed
        int price = 0;
        try
        {
            FileReader brr = new FileReader("Book.txt");
            BufferedReader burr = new BufferedReader(brr);
            String re ="";
            while((re=burr.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(re,",");
                String name = tk.nextToken();
                String auth = tk.nextToken();
                String gen = tk.nextToken();
                int pr = Integer.parseInt(tk.nextToken());
                String av = tk.nextToken();
                String del = tk.nextToken();
                int bookse = Integer.parseInt(tk.nextToken());
                int se = Integer.parseInt(tk.nextToken());

                if(ser==se)
                {
                    price=pr;
                }
            }
        }

        catch(Exception e)
        {

        }
        try
        {
            String x = getTodayDate();
            FileWriter BookInfo = new FileWriter("Payment.txt", true);
            PrintWriter BookWriter = new PrintWriter(BookInfo);

            BookWriter.println("Damage" + "," + patser + "," + ser + "," + x) ;
            BookWriter.close();

            FileWriter PenInfo = new FileWriter("Transactions.txt", true);
            PrintWriter PenWriter = new PrintWriter(PenInfo);

            PenWriter.println("Damage" + "," + patser + "," + ser + "," + x) ;
            PenWriter.close();
        }
        catch(Exception e)
        {

        }
        javax.swing.JOptionPane.showMessageDialog(null, "Damage Penalty Added!" + "\n" + "The Fee is: RM" + price, "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_ReportDmgActionPerformed

    private void RenewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RenewActionPerformed
        String canren = Table.getModel().getValueAt(Table.getSelectedRow(), 3).toString();
        boolean err=true;
        boolean dell=false;
        if(Table.getSelectionModel().isSelectionEmpty())
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Select Book!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=false;
        }
        if(canren.equals("No") && err==true)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Cannot Renew Book!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);

            err=false;

        }
        try{
            FileReader mer = new FileReader("Patron.txt");
            BufferedReader mem = new BufferedReader(mer);
            String res ="";
            while((res=mem.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(res,",");
                String block = tk.nextToken();
                String floor = tk.nextToken();
                String n = tk.nextToken();
                String hpn = tk.nextToken();
                String email = tk.nextToken();
                String memb = tk.nextToken();
                String del = tk.nextToken();
                int ser = Integer.parseInt(tk.nextToken());

                if(patser==ser && del.equals("N"))
                {
                    dell=true;
                }
            }
        }
        catch(Exception e)
        {

        }
        if(dell==true && err==true)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Patron is Deleted and Cannot Renew Books!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=false;
        }

        if(err==true)
        {
            try{

                FileReader cr = new FileReader("Borrow.txt");
                BufferedReader br = new BufferedReader(cr);
                String re ="";
                String bordate = "";
                int ren = 0;
                while((re=br.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");
                    int patron = Integer.parseInt(tk.nextToken());
                    int bookse = Integer.parseInt(tk.nextToken());
                    int se = Integer.parseInt(tk.nextToken());
                    int renew = Integer.parseInt(tk.nextToken());
                    String due = tk.nextToken();
                    if(patron==patser && se==ser)
                    {
                        bordate=due;
                        ren=renew;
                    }
                }
                ren=ren-1;
                int duration = 0;
                String memb = "";

                FileReader fr = new FileReader("Patron.txt");
                BufferedReader brr = new BufferedReader(fr);
                String r = "";
                while ((r = brr.readLine()) != null)
                {
                    StringTokenizer tk = new StringTokenizer(r, ",");
                    String block = tk.nextToken();
                    String floor = tk.nextToken();
                    String n = tk.nextToken();
                    int hpn = Integer.parseInt(tk.nextToken());
                    String email = tk.nextToken();
                    String mem = tk.nextToken();
                    String del = tk.nextToken();
                    int serial = Integer.parseInt(tk.nextToken());
                    if(patser==serial)
                    {
                        memb=mem;
                    }
                }
                brr.close();

                FileReader frr = new FileReader("Membership.txt");
                BufferedReader brrr = new BufferedReader(frr);
                r = "";
                while ((r = brrr.readLine()) != null)
                {
                    StringTokenizer tk = new StringTokenizer(r, ",");
                    String title = tk.nextToken();
                    String price = tk.nextToken();
                    String borrowQ = tk.nextToken();
                    String holdQ = tk.nextToken();
                    int duratio = Integer.parseInt(tk.nextToken());
                    String memberQ  = tk.nextToken();
                    String del = tk.nextToken();
                    String ser = tk.nextToken();
                    if(memb.equals(ser))
                    {
                        duration=duratio;
                    }
                }
                brr.close();

                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                duration = duration * 2;
                Calendar c = Calendar.getInstance(); // creating a calendar instance
                c.add(Calendar.DATE, duration); //number of days to add
                String dt = sdf.format(c.getTime()); //convert the calendar to dd/MM/yyyy format
                ArrayList<String>restoreList = new ArrayList<String>();

                FileReader frrr = new FileReader("Borrow.txt");
                BufferedReader bur = new BufferedReader(frrr);
                re ="";
                System.out.println(patser + "," + ser);
                while((re=bur.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(re,",");

                    int patron = Integer.parseInt(tk.nextToken());
                    int bookse = Integer.parseInt(tk.nextToken());
                    int se = Integer.parseInt(tk.nextToken());
                    int renew = Integer.parseInt(tk.nextToken());
                    String due = tk.nextToken();
                    System.out.println(patron + "," + se);
                    if(patron==patser && se==ser)
                    {

                        restoreList.add(patron + "," + bookse + "," + se + ",0," + dt);
                    }
                    else
                    {
                        restoreList.add(re);//added the record to the array list
                    }
                }
                bur.close();

                FileWriter fw = new FileWriter("Borrow.txt",false);
                PrintWriter pr = new PrintWriter(fw);

                for(int i=0; i<restoreList.size(); i++)
                {
                    String s = restoreList.get(i);
                    pr.println(s);
                }
                pr.close();

                FileWriter TransInfo = new FileWriter("Transactions.txt", true);
                PrintWriter TransWriter = new PrintWriter(TransInfo);

                TransWriter.println("Renew" + "," + patser + "," +  ser + "," + dt) ;
                TransWriter.close();
                ShowAll.doClick();
                javax.swing.JOptionPane.showMessageDialog(null, "Book Renewed!" + "\n" + "Your Book is Now Due: " + dt, "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            }
            catch(Exception e)
            {

            }
        }
    }//GEN-LAST:event_RenewActionPerformed

    private void BackToAdminoHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToAdminoHomePageActionPerformed
        AdminHomePage f1 = new AdminHomePage();

        f1.show();

        ((Window)getRootPane().getParent()).dispose();
    }//GEN-LAST:event_BackToAdminoHomePageActionPerformed
int ser = 0;    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Author;
    private javax.swing.JTextField Author1;
    private javax.swing.JLabel AuthorLabel;
    private javax.swing.JLabel AuthorLabel1;
    private javax.swing.JButton BackToAdminoHomePage;
    private javax.swing.JLabel BookName;
    private javax.swing.JLabel BookName1;
    private javax.swing.JButton Borrow;
    private javax.swing.JButton Borrow1;
    private javax.swing.JTextField CopLeft;
    private javax.swing.JTextField CopLeft1;
    private javax.swing.JLabel EstimateLabel;
    private javax.swing.JLabel EstimateLabel1;
    private javax.swing.JTextField Genre;
    private javax.swing.JTextField Genre1;
    private javax.swing.JLabel GenreLabel;
    private javax.swing.JLabel GenreLabel1;
    private javax.swing.JButton Hold;
    private javax.swing.JButton Hold1;
    private javax.swing.JLabel PatSearch;
    private javax.swing.JComboBox<String> PatronCombo;
    private javax.swing.JButton Renew;
    private javax.swing.JButton ReportDmg;
    private javax.swing.JButton Return;
    private javax.swing.JButton Search;
    private javax.swing.JButton Search1;
    private javax.swing.JTextField SearchBar;
    private javax.swing.JButton Select;
    private javax.swing.JButton Select1;
    private javax.swing.JButton SelectBook;
    private javax.swing.JComboBox<String> SerialCombo;
    private javax.swing.JButton ShowAll;
    private javax.swing.JTable Table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
