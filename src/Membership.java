
import java.awt.Window;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.StringTokenizer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author E-Therng
 */
public class Membership extends javax.swing.JPanel {
int user = 0;
    /**
     * Creates new form Membership
     */
    public Membership() {
        initComponents();
        Price.setEditable(false);
        BorrowQ.setEditable(false);
        HoldQ.setEditable(false);
        Duration.setEditable(false);
        
         SerialCombo.setEnabled(false);
        SerialCombo.setVisible(false);
        boolean x = true;
        try {
            FileReader fr = new FileReader("CurrentUser.txt");
            BufferedReader br = new BufferedReader(fr);
            String r = "";
            while ((r = br.readLine()) != null) {
                StringTokenizer tk = new StringTokenizer(r, ",");
                String pat = tk.nextToken();
                user = Integer.parseInt(pat);
                }
        } catch (Exception e) {
            x=false;
        }
        
        if(x==true)
        {
            try {
            FileReader fr = new FileReader("Patron.txt");
            BufferedReader br = new BufferedReader(fr);
            String r = "";
            while ((r = br.readLine()) != null) {
                StringTokenizer tk = new StringTokenizer(r, ",");
                String block = tk.nextToken();
                String floor = tk.nextToken();
                String n = tk.nextToken();
                String hpn = tk.nextToken();
                String email = tk.nextToken();
                String mem = tk.nextToken();
                String del = tk.nextToken();
                int ser = Integer.parseInt(tk.nextToken());
                if (user==ser) {
                    PatronCombo.removeAllItems();
                    PatronCombo.addItem(n);
                }
            }
            br.close();
        } catch (Exception e) {

        }
        }
    }
    private String getTodayDate()
    {
        
        //defines the format
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        
        //gets the system datee
        Date todayD = new Date();
        
        //formats today's date as per our format defined in the first line
        String m = df.format(todayD);
        
        return m;
        //will return string m which contains the data.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        PatronCombo = new javax.swing.JComboBox<>();
        Select = new javax.swing.JButton();
        Select1 = new javax.swing.JButton();
        PatSearch = new javax.swing.JLabel();
        SearchBar = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        SerialCombo = new javax.swing.JComboBox<>();
        ApplyChange = new javax.swing.JRadioButton();
        SeeStatus = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        SelectMember = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Price = new javax.swing.JTextField();
        BorrowQ = new javax.swing.JTextField();
        HoldQ = new javax.swing.JTextField();
        Duration = new javax.swing.JTextField();
        Apply = new javax.swing.JButton();
        BackToAdminHomePage = new javax.swing.JButton();

        setBackground(new java.awt.Color(202, 214, 226));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setText("Membership");

        jPanel3.setBackground(new java.awt.Color(162, 249, 211));

        PatronCombo.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        PatronCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Patron Name" }));
        PatronCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatronComboActionPerformed(evt);
            }
        });

        Select.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Select.setText("Sign In");
        Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectActionPerformed(evt);
            }
        });

        Select1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Select1.setText("Sign Out");
        Select1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select1ActionPerformed(evt);
            }
        });

        PatSearch.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        PatSearch.setText("Patron Search");

        SearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarActionPerformed(evt);
            }
        });

        Search.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        SerialCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Serial" }));
        SerialCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SerialComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(Select, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(Select1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(PatronCombo, 0, 196, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(PatSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchBar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Search, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SerialCombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PatSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SerialCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PatronCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Select, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Select1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        buttonGroup1.add(ApplyChange);
        ApplyChange.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        ApplyChange.setText("Apply/Change Membership");
        ApplyChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyChangeActionPerformed(evt);
            }
        });

        buttonGroup1.add(SeeStatus);
        SeeStatus.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        SeeStatus.setText("See Member Status");
        SeeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeStatusActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(243, 196, 192));

        SelectMember.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Member Status" }));
        SelectMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectMemberActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel2.setText("Member Status");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("Fee");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel4.setText("Book Borrowing Quota");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Book Holding Quota");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel6.setText("Duration of Book Borrowing");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Price)
                    .addComponent(Duration)
                    .addComponent(BorrowQ)
                    .addComponent(HoldQ)
                    .addComponent(SelectMember, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SelectMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(BorrowQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(HoldQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        Apply.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        Apply.setText("Apply Membership");
        Apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyActionPerformed(evt);
            }
        });

        BackToAdminHomePage.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        BackToAdminHomePage.setText("Back to Home Page");
        BackToAdminHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToAdminHomePageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BackToAdminHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SeeStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ApplyChange))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(Apply)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BackToAdminHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SeeStatus)
                    .addComponent(ApplyChange))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Apply, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void PatronComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatronComboActionPerformed
        if(PatronCombo.getSelectedIndex()>0)
        {
            SerialCombo.setSelectedIndex(PatronCombo.getSelectedIndex());
        }
    }//GEN-LAST:event_PatronComboActionPerformed

    private void SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectActionPerformed
        if(SerialCombo.getSelectedIndex()==0)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Please Select Patron!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else
        {

            try{
                user = Integer.parseInt(SerialCombo.getSelectedItem().toString());
                FileWriter PatInfo = new FileWriter("CurrentUser.txt", false);
                PrintWriter PatWriter = new PrintWriter(PatInfo);
                String x = getTodayDate();
                PatWriter.println(SerialCombo.getSelectedItem().toString());
                PatWriter.close();
            }
            catch(Exception e)
            {

            }
        }
    }//GEN-LAST:event_SelectActionPerformed

    private void Select1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select1ActionPerformed
        try{

            FileWriter PatInfo = new FileWriter("CurrentUser.txt", false);
            PrintWriter PatWriter = new PrintWriter(PatInfo);
            String x = getTodayDate();
            PatWriter.println("");
            PatWriter.close();
            PatronCombo.removeAllItems();
            PatronCombo.addItem("Select Patron");
            SearchBar.setText("");
        }
        catch(Exception e)
        {

        }
    }//GEN-LAST:event_Select1ActionPerformed

    private void SearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchBarActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        if(SearchBar.getText().equals(""))
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter Patron Name!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else{
            try{
                PatronCombo.removeAllItems();
                PatronCombo.addItem("Patron Name");
                SerialCombo.removeAllItems();
                SerialCombo.addItem("Serial");
                String na = SearchBar.getText();
                FileReader fr = new FileReader("Patron.txt");
                BufferedReader br = new BufferedReader(fr);
                String r ="";

                while((r=br.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(r,",");
                    String block = tk.nextToken();
                    String floor = tk.nextToken();
                    String n = tk.nextToken();
                    String hpn = tk.nextToken();
                    String email = tk.nextToken();
                    String mem = tk.nextToken();
                    String del = tk.nextToken();
                    String ser = tk.nextToken();
                    if(n.contains(na))
                    {
                        PatronCombo.addItem(n + ": " + block + "," + floor);
                        SerialCombo.addItem(ser);
                    }
                }
                br.close();
            }
            catch(Exception e)
            {
            }
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void SerialComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SerialComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SerialComboActionPerformed

    private void SeeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeStatusActionPerformed
        Apply.setEnabled(false);

        try
        {
            SelectMember.removeAllItems();
            SelectMember.setEnabled(true);
        }
        catch(Exception e)
        {
        }
        int memb = 0;
        try{

            FileReader mer = new FileReader("Patron.txt");
            BufferedReader mem = new BufferedReader(mer);
            String res ="";
            while((res=mem.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(res,",");
                String block = tk.nextToken();
                String floor = tk.nextToken();
                String n = tk.nextToken();
                String hpn = tk.nextToken();
                String email = tk.nextToken();
                int membe = Integer.parseInt(tk.nextToken());
                String del = tk.nextToken();
                int ser = Integer.parseInt(tk.nextToken());
                if(user==ser)
                {
                    memb=membe;
                }

            }
        }
        catch(Exception e)
        {

        }
        try{

            FileReader fr = new FileReader("Membership.txt");
            BufferedReader br = new BufferedReader(fr);
            String r ="";
            while((r=br.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String title = tk.nextToken();
                String price = tk.nextToken();
                String borrowQ = tk.nextToken();
                String holdQ = tk.nextToken();
                String duration = tk.nextToken();
                String memberQ  = tk.nextToken();
                String del  = tk.nextToken();
                int se = Integer.parseInt(tk.nextToken());

                if(memb==se)
                {

                }
                if(memb==se)
                {
                    SelectMember.addItem(title);
                    Price.setText(price);
                    BorrowQ.setText(borrowQ);
                    HoldQ.setText(holdQ);
                    Duration.setText(duration);
                }
            }
        }
        catch(Exception e)
        {

        }
    }//GEN-LAST:event_SeeStatusActionPerformed

    private void ApplyChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyChangeActionPerformed
        SelectMember.setEnabled(true);
        Price.setText("");
        BorrowQ.setText("");
        HoldQ.setText("");
        Duration.setText("");
        Apply.setEnabled(true);

        try
        {
            SelectMember.removeAllItems();
            SelectMember.addItem("Select Membership");

        }
        catch(Exception e)
        {
        }
        int member = 0;

        ArrayList<String>memcount = new ArrayList<String>();
        ArrayList<String>memQ = new ArrayList<String>();
        ArrayList<String>memm = new ArrayList<String>();

        try
        {

            FileReader cr = new FileReader("Membership.txt");
            BufferedReader cur = new BufferedReader(cr);
            String r ="";
            int a = 0;
            while((r=cur.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String title = tk.nextToken();
                String price = tk.nextToken();
                String borrowQ = tk.nextToken();
                String holdQ = tk.nextToken();
                String duration = tk.nextToken();
                int memberQ  = Integer.parseInt(tk.nextToken());
                String del = tk.nextToken();
                int se = Integer.parseInt(tk.nextToken());
                memcount.add(se+"");
                memQ.add(memberQ+"");
            }

            int q = 0;
            int seria = 0;
            int memberQ = 0;
            for(int i=0; i<memcount.size(); i++)
            {
                q = 0;
                seria = 0;
                int memser = Integer.parseInt(memcount.get(i));
                memberQ = Integer.parseInt(memQ.get(i));
                FileReader mer = new FileReader("Patron.txt");
                BufferedReader mem = new BufferedReader(mer);
                r ="";

                while((r=mem.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(r,",");
                    String block = tk.nextToken();
                    String floor = tk.nextToken();
                    String n = tk.nextToken();
                    String hpn = tk.nextToken();
                    String email = tk.nextToken();
                    int me = Integer.parseInt(tk.nextToken());
                    String del = tk.nextToken();
                    int seri = Integer.parseInt(tk.nextToken());

                    if(seri==user)
                    {
                        alreadymem = me;
                    }
                    if(memser==me)
                    {
                        q=q+1;
                        seria = seri;

                    }

                }
                if(q<memberQ || memser==alreadymem)
                {
                    memm.add(memser+"");
                }
            }

        }
        catch(Exception e)
        {

        }

        try
        {
            for(int i=0; i<memm.size(); i++)
            {
                int s = Integer.parseInt(memm.get(i));

                FileReader fr = new FileReader("Membership.txt");
                BufferedReader br = new BufferedReader(fr);
                String r ="";
                while((r=br.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(r,",");
                    String title = tk.nextToken();
                    String price = tk.nextToken();
                    String borrowQ = tk.nextToken();
                    String holdQ = tk.nextToken();
                    String duration = tk.nextToken();
                    int memberQ = Integer.parseInt(tk.nextToken());
                    String del = tk.nextToken();
                    int se = Integer.parseInt(tk.nextToken());

                    if(del.equals("0"))
                    {

                    }
                    else if(s==se && alreadymem!=se)
                    {
                        SelectMember.addItem(title);
                    }
                }
            }
        }
        catch(Exception e)
        {

        }
    }//GEN-LAST:event_ApplyChangeActionPerformed

    private void SelectMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectMemberActionPerformed
        try{
            String selected = SelectMember.getSelectedItem().toString();
            FileReader fr = new FileReader("Membership.txt");
            BufferedReader br = new BufferedReader(fr);
            String r ="";
            while((r=br.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(r,",");
                String title = tk.nextToken();
                String price = tk.nextToken();
                String borrowQ = tk.nextToken();
                String holdQ = tk.nextToken();
                String duration = tk.nextToken();
                String memberQ  = tk.nextToken();
                int se = Integer.parseInt(tk.nextToken());

                if(selected.equals(title))
                {
                    Price.setText(price);
                    BorrowQ.setText(borrowQ);
                    HoldQ.setText(holdQ);
                    Duration.setText(duration);
                }
            }

            br.close();
        }
        catch(Exception e)
        {

        }
    }//GEN-LAST:event_SelectMemberActionPerformed

    private void ApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyActionPerformed
        int se = 0;
        boolean err = true;
        boolean dell = false;
        if(SelectMember.getSelectedIndex()==0)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Select Membership!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=false;
        }
        try{
            FileReader mer = new FileReader("Patron.txt");
            BufferedReader mem = new BufferedReader(mer);
            String res ="";
            while((res=mem.readLine())!=null)
            {
                StringTokenizer tk = new StringTokenizer(res,",");
                String block = tk.nextToken();
                String floor = tk.nextToken();
                String n = tk.nextToken();
                String hpn = tk.nextToken();
                String email = tk.nextToken();
                String memb = tk.nextToken();
                String del = tk.nextToken();
                int ser = Integer.parseInt(tk.nextToken());

                if(user==ser && del.equals("N"))
                {
                    dell=true;
                }
            }
        }
        catch(Exception e)
        {

        }
        if(dell==true && err==true)
        {
            javax.swing.JOptionPane.showMessageDialog(null, "Patron is Deleted and Cannot Apply Membership!", "Message: ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
            err=false;
        }
        if(err==true)
        {
            String pri = "";
            try{
                System.out.println(SelectMember.getSelectedItem().toString());
                FileReader fr = new FileReader("Membership.txt");
                BufferedReader br = new BufferedReader(fr);
                String r ="";

                while((r=br.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(r,",");
                    String title = tk.nextToken();
                    String price = tk.nextToken();
                    String borrowQ = tk.nextToken();
                    String holdQ = tk.nextToken();
                    String duration = tk.nextToken();
                    String memberQ  = tk.nextToken();
                    String del = tk.nextToken();
                    int ser = Integer.parseInt(tk.nextToken());

                    if(title.equals(SelectMember.getSelectedItem().toString()))
                    {
                        se = ser;
                        pri=price;
                    }
                }
                br.close();

                System.out.println(se);

                ArrayList<String>restoreList = new ArrayList<String>();
                FileReader mer = new FileReader("Patron.txt");
                BufferedReader mem = new BufferedReader(mer);
                String res ="";
                r ="";
                int member = 0;
                int m = 0;
                while((res=mem.readLine())!=null)
                {
                    StringTokenizer tk = new StringTokenizer(res,",");
                    String block = tk.nextToken();
                    String floor = tk.nextToken();
                    String n = tk.nextToken();
                    String hpn = tk.nextToken();
                    String email = tk.nextToken();
                    String memb = tk.nextToken();
                    String del = tk.nextToken();
                    int ser = Integer.parseInt(tk.nextToken());

                    if(user==ser)
                    {
                        restoreList.add(block + "," + floor + "," + n + "," + hpn + "," + email +","+se+","+ del + "," + ser);
                    }
                    else
                    {
                        restoreList.add(res);//added the record to the array list
                    }
                }

                FileWriter fw = new FileWriter("Patron.txt",false);
                PrintWriter pr = new PrintWriter(fw);

                for(int i=0; i<restoreList.size(); i++)
                {
                    String s = restoreList.get(i);
                    pr.println(s);
                }
                pr.close();
            }
            catch(Exception e)
            {

            }
            try{

                FileWriter PatInfo = new FileWriter("Transactions.txt", true);
                PrintWriter PatWriter = new PrintWriter(PatInfo);
                String x = getTodayDate();
                PatWriter.println("Member," + user + "," + se + "," + x);
                PatWriter.close();

                FileWriter PayInfo = new FileWriter("Payment.txt", true);
                PrintWriter PayWriter = new PrintWriter(PayInfo);
                x = getTodayDate();
                PayWriter.println("Member," + user + "," + se + "," + x);
                PayWriter.close();
            }
            catch(Exception e)
            {

            }
            javax.swing.JOptionPane.showMessageDialog(null, "Membership Applied!" + "\n" + "The Price is: RM" + pri, "Message: Saved!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_ApplyActionPerformed

    private void BackToAdminHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToAdminHomePageActionPerformed
        AdminHomePage f1 = new AdminHomePage();

        f1.show();

        ((Window)getRootPane().getParent()).dispose();
    }//GEN-LAST:event_BackToAdminHomePageActionPerformed
int alreadymem = 0;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Apply;
    private javax.swing.JRadioButton ApplyChange;
    private javax.swing.JButton BackToAdminHomePage;
    private javax.swing.JTextField BorrowQ;
    private javax.swing.JTextField Duration;
    private javax.swing.JTextField HoldQ;
    private javax.swing.JLabel PatSearch;
    private javax.swing.JComboBox<String> PatronCombo;
    private javax.swing.JTextField Price;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchBar;
    private javax.swing.JRadioButton SeeStatus;
    private javax.swing.JButton Select;
    private javax.swing.JButton Select1;
    private javax.swing.JComboBox<String> SelectMember;
    private javax.swing.JComboBox<String> SerialCombo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
